%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: channel2.pdf
%%Creator: Adobe Acrobat 9.0.0
%%For: Dell
%%CreationDate: 2017/8/1, 17:35:52
%%BoundingBox: -1 0 502 500
%%HiResBoundingBox: 0 0 501.4567 499.0079
%%CropBox: 0 0 501.4567 499.0079
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 816 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.1-c041 52.342996, 2008/05/07-20:48:00        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   xmp:CreateDate="2017-08-01T17:34:46+08:00"
   xmp:ModifyDate="2017-08-01T17:35:43+08:00"
   xmp:MetadataDate="2017-08-01T17:35:43+08:00"
   pdf:Producer="Apache FOP Version 2.2.0-SNAPSHOT: PDFDocumentGraphics2D"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:8daef563-cc27-4cee-8fb9-7d6783cd12b9"
   xmpMM:InstanceID="uuid:d1e7c0b9-b5a9-4161-9411-5bc8c05af48b"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -499.008 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
-7.62939e-6 0 mo
-7.62939e-6 499.008 li
501.457 499.008 li
501.457 0 li
cp
clp
[1 0 0 1 -39.6851 0 ]ct
.262776 -39.0089 mo
595.013 -39.0089 li
595.013 540.741 li
.262776 540.741 li
cp
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
.262776 -39.0089 mo
595.013 -39.0089 li
595.013 540.741 li
.262776 540.741 li
cp
f
77.5128 57.7411 mo
538.763 57.7411 li
538.763 4.49115 li
77.5128 4.49115 li
cp
f
.5 lw
2 lc
1 lj
10 ml
[] 0 dsh
true sadj
77.5128 57.7411 mo
538.763 57.7411 li
1 /0 /CSD get_res sepcs
.851 sep
@
77.5128 4.49115 mo
538.763 4.49115 li
@
77.5128 57.7411 mo
77.5128 53.1287 li
@
121.864 57.7411 mo
121.864 53.1287 li
@
166.215 57.7411 mo
166.215 53.1287 li
@
210.566 57.7411 mo
210.566 53.1287 li
@
254.917 57.7411 mo
254.917 53.1287 li
@
299.268 57.7411 mo
299.268 53.1287 li
@
343.618 57.7411 mo
343.618 53.1287 li
@
387.969 57.7411 mo
387.969 53.1287 li
@
432.32 57.7411 mo
432.32 53.1287 li
@
476.671 57.7411 mo
476.671 53.1287 li
@
521.022 57.7411 mo
521.022 53.1287 li
@
77.5128 4.49115 mo
77.5128 9.1037 li
@
121.864 4.49115 mo
121.864 9.1037 li
@
166.215 4.49115 mo
166.215 9.1037 li
@
210.566 4.49115 mo
210.566 9.1037 li
@
254.917 4.49115 mo
254.917 9.1037 li
@
299.268 4.49115 mo
299.268 9.1037 li
@
343.618 4.49115 mo
343.618 9.1037 li
@
387.969 4.49115 mo
387.969 9.1037 li
@
432.32 4.49115 mo
432.32 9.1037 li
@
476.671 4.49115 mo
476.671 9.1037 li
@
521.022 4.49115 mo
521.022 9.1037 li
@
%%IncludeResource: font Helvetica
/MPSWGR+Helvetica /Helvetica findfont ct_VMDictPut
/MPSWGR+Helvetica*1 
[48{/.notdef}rp /zero /one /two /three /four /five 202{/.notdef}rp]
MPSWGR+Helvetica nf
MPSWGR+Helvetica*1 [12 0 0 -12 0 0 ]msf
74.1378 74.8912 mo
(0)sh
115.114 74.8912 mo
(50)
[6.672 0 ]xsh
156.09 74.8912 mo
(100)
[6.672 6.672 0 ]xsh
200.441 74.8912 mo
(150)
[6.672 6.672 0 ]xsh
244.792 74.8912 mo
(200)
[6.672 6.67198 0 ]xsh
289.143 74.8912 mo
(250)
[6.672 6.672 0 ]xsh
333.494 74.8912 mo
(300)
[6.672 6.672 0 ]xsh
377.845 74.8912 mo
(350)
[6.672 6.672 0 ]xsh
422.195 74.8912 mo
(400)
[6.672 6.672 0 ]xsh
466.546 74.8912 mo
(450)
[6.672 6.672 0 ]xsh
510.897 74.8912 mo
(500)
[6.672 6.672 0 ]xsh
%%IncludeResource: font Helvetica-Bold
/MPSWGS+Helvetica-Bold /Helvetica-Bold findfont ct_VMDictPut
/MPSWGS+Helvetica-Bold*1 
[84{/.notdef}rp /T 12{/.notdef}rp /a /.notdef /c /.notdef /e 
12{/.notdef}rp /r 141{/.notdef}rp]
MPSWGS+Helvetica-Bold nf
MPSWGS+Helvetica-Bold*1 [12 0 0 -12 0 0 ]msf
292.013 91.6412 mo
(Trace)
[7.33191 4.66791 6.672 6.672 0 ]xsh
77.5128 57.7411 mo
77.5128 4.49115 li
@
538.763 57.7411 mo
538.763 4.49115 li
@
77.5128 57.7411 mo
82.1253 57.7411 li
@
77.5128 36.4412 mo
82.1253 36.4412 li
@
77.5128 15.1412 mo
82.1253 15.1412 li
@
538.763 57.7411 mo
534.15 57.7411 li
@
538.763 36.4412 mo
534.15 36.4412 li
@
538.763 15.1412 mo
534.15 15.1412 li
@
%%IncludeResource: font Helvetica
/MPSWGR+Helvetica*1 
[45{/.notdef}rp /hyphen 2{/.notdef}rp /zero /one /two /three /four 
/five 202{/.notdef}rp]
MPSWGR+Helvetica nf
MPSWGR+Helvetica*1 [12 0 0 -12 0 0 ]msf
55.1128 62.6161 mo
(-10)
[3.99591 6.672 0 ]xsh
66.3628 41.3162 mo
(0)sh
59.6128 20.0162 mo
(10)
[6.672 0 ]xsh
%%IncludeResource: font Helvetica-Bold
/MPSWGS+Helvetica-Bold*1 
[65{/.notdef}rp /A 18{/.notdef}rp /T 12{/.notdef}rp /a /.notdef /c 
/d /e 3{/.notdef}rp /i 2{/.notdef}rp /l /m 2{/.notdef}rp 
/p /.notdef /r /.notdef /t /u 138{/.notdef}rp]
MPSWGS+Helvetica-Bold nf
MPSWGS+Helvetica-Bold*1 [-5.2e-7 -12 -12 5.2e-7 0 0 ]msf
49.1128 60.7411 mo
(Amplitude)
[-8.66382 -10.6679 -7.33191 -3.336 -3.336 -3.99591 -7.33191 -7.33191 0 ]ysh
1 lw
0 lc
77.5128 38.2601 mo
79.2868 37.9533 li
81.0608 36.9348 li
82.8349 35.5004 li
84.6089 34.8348 li
86.383 35.6902 li
88.157 37.1959 li
89.931 37.9188 li
91.7051 37.9011 li
93.4791 38.1882 li
95.2532 38.6488 li
97.0272 37.977 li
98.8012 36.3601 li
100.575 35.2661 li
102.349 34.3867 li
104.123 32.9228 li
105.897 32.5332 li
107.671 34.3431 li
109.445 36.936 li
111.219 38.2277 li
112.994 37.5936 li
114.768 36.2277 li
116.542 35.8825 li
118.316 36.9918 li
120.09 38.7136 li
121.864 40.0335 li
123.638 40.0562 li
125.412 38.415 li
127.186 35.8679 li
128.96 33.6036 li
130.734 32.6939 li
132.508 33.1723 li
134.282 34.4387 li
136.056 35.7671 li
137.83 36.6768 li
139.604 36.9084 li
141.378 36.7291 li
143.152 36.6805 li
144.926 36.8608 li
146.7 36.8667 li
148.474 36.4514 li
150.248 35.8693 li
152.022 35.5372 li
153.796 35.5605 li
155.57 35.7714 li
157.344 35.8289 li
159.119 35.9773 li
160.893 37.0073 li
162.667 38.8051 li
164.441 40.1646 li
166.215 40.4482 li
167.989 39.9233 li
169.763 39.096 li
171.537 38.2746 li
173.311 37.5892 li
175.085 36.9332 li
176.859 36.1074 li
178.633 35.0395 li
180.407 34.0753 li
182.181 33.6045 li
183.955 33.5898 li
185.729 33.7584 li
187.503 33.7455 li
189.277 33.2533 li
191.051 32.5839 li
192.825 32.5594 li
194.599 33.7074 li
196.373 35.2864 li
198.147 36.3389 li
199.921 36.7133 li
201.695 36.8701 li
203.47 36.9456 li
205.244 36.658 li
207.018 36.0717 li
208.792 35.6957 li
210.566 36.0209 li
212.34 36.9504 li
214.114 37.8516 li
215.888 38.2703 li
217.662 38.04 li
219.436 37.3178 li
221.21 36.4794 li
222.984 35.8215 li
224.758 35.3539 li
226.532 35.0645 li
228.306 34.9027 li
230.08 34.7339 li
231.854 34.4706 li
233.628 34.1224 li
235.402 33.6143 li
237.176 33.0235 li
238.95 32.4977 li
240.724 32.3053 li
242.498 32.5569 li
244.272 33.1915 li
246.046 34.0703 li
247.82 35.4604 li
249.595 37.6089 li
251.369 39.9995 li
253.143 41.7443 li
254.917 42.0335 li
256.691 40.942 li
258.465 39.0197 li
260.239 37.0444 li
262.013 35.5678 li
263.787 34.6537 li
265.561 34.1555 li
267.335 33.9332 li
269.109 33.9639 li
270.883 34.3188 li
272.657 34.7975 li
274.431 35.1283 li
276.205 35.1892 li
277.979 35.1439 li
279.753 35.2231 li
281.527 35.3863 li
283.301 35.4067 li
285.075 35.3039 li
286.849 35.3015 li
288.623 35.3925 li
290.397 35.4893 li
292.171 35.6463 li
293.945 35.9074 li
295.719 36.1135 li
297.493 36.0909 li
299.268 35.9898 li
301.042 36.0433 li
302.816 36.1931 li
304.59 36.3491 li
306.364 36.6583 li
308.138 37.0394 li
309.912 37.0596 li
311.686 36.6868 li
313.46 36.2393 li
315.234 35.8882 li
317.008 35.7664 li
318.782 35.8647 li
320.556 35.9376 li
322.33 35.9146 li
324.104 35.9032 li
325.878 35.9857 li
327.652 36.1121 li
329.426 36.3008 li
331.2 36.5329 li
332.974 36.7503 li
334.748 36.8536 li
336.522 36.8143 li
338.296 36.593 li
340.07 36.2519 li
341.844 36.0011 li
343.618 35.9519 li
345.393 35.9708 li
347.167 35.9412 li
348.941 35.8708 li
350.715 35.8981 li
352.489 36.1021 li
354.263 36.301 li
356.037 36.4366 li
357.811 36.7601 li
359.585 37.3503 li
361.359 37.9468 li
363.133 38.3772 li
364.907 38.6877 li
366.681 38.8336 li
368.455 38.5572 li
370.229 37.6273 li
372.003 36.0186 li
373.777 33.8851 li
375.551 31.5063 li
377.325 29.2972 li
379.099 27.9706 li
380.873 28.4333 li
382.647 30.782 li
384.421 34.0695 li
386.195 37.9246 li
387.969 42.1542 li
389.743 45.8793 li
391.518 47.9505 li
393.292 47.5613 li
395.066 45.1229 li
396.84 41.9487 li
398.614 38.6995 li
400.388 35.851 li
402.162 33.8966 li
403.936 33.0656 li
405.71 33.1888 li
407.484 33.8219 li
409.258 34.6245 li
411.032 35.3822 li
412.806 35.9309 li
414.58 35.961 li
416.354 35.2303 li
418.128 34.2792 li
419.902 34.1461 li
421.676 34.7192 li
423.45 35.3704 li
425.224 36.0944 li
426.998 36.8618 li
428.772 37.4962 li
430.546 37.7315 li
432.32 37.4926 li
434.094 36.7645 li
435.868 35.6801 li
437.643 34.6146 li
439.417 33.7091 li
441.191 33.0558 li
442.965 32.7794 li
444.739 32.8302 li
446.513 33.0317 li
448.287 33.6532 li
450.061 34.9045 li
451.835 36.8971 li
453.609 39.1284 li
455.383 40.7117 li
457.157 41.3041 li
458.931 41.4599 li
460.705 41.5912 li
462.479 41.7111 li
464.253 42.0317 li
466.027 42.4472 li
467.801 42.2362 li
469.575 41.1394 li
471.349 38.6911 li
473.123 35.6504 li
474.897 33.1213 li
476.671 31.4496 li
478.445 30.8253 li
480.219 31.1091 li
481.993 31.9459 li
483.768 32.3106 li
485.542 32.7428 li
487.316 33.6884 li
489.09 35.3533 li
490.864 37.1718 li
492.638 38.4957 li
494.412 39.14 li
496.186 39.5483 li
497.96 39.835 li
499.734 40.0831 li
501.508 40.0267 li
503.282 39.6027 li
505.056 38.7981 li
506.83 38.2792 li
508.604 37.6767 li
510.378 36.8652 li
512.152 36.1915 li
513.926 35.4393 li
515.7 34.3131 li
517.474 33.1144 li
519.248 32.6961 li
521.022 33.5764 li
522.796 35.1632 li
524.57 36.7721 li
526.344 38.0241 li
528.118 38.7073 li
529.893 38.7698 li
531.667 38.3226 li
533.441 37.6369 li
535.215 36.9511 li
536.989 36.4095 li
538.763 36.1616 li
1 /0 /CSD get_res sepcs
1 sep
@
2 lj
1 ml
[6 2.25 1.5 2.25 ] 0 dsh
77.5128 39.9395 mo
79.2868 35.4495 li
81.0608 35.126 li
82.8349 37.618 li
84.6089 37.6209 li
86.383 35.8787 li
88.157 34.7719 li
89.931 42.075 li
91.7051 39.7983 li
93.4791 37.5814 li
95.2532 39.5062 li
97.0272 39.191 li
98.8012 34.1595 li
100.575 35.0594 li
102.349 35.3549 li
104.123 20.137 li
105.897 32.4933 li
107.671 31.7537 li
109.445 35.5707 li
111.219 33.1937 li
112.994 37.5735 li
114.768 36.6578 li
116.542 32.6952 li
118.316 38.9699 li
120.09 39.9364 li
121.864 38.1375 li
123.638 38.3415 li
125.412 36.8199 li
127.186 35.4919 li
128.96 33.2203 li
130.734 27.3286 li
132.508 35.5245 li
134.282 33.157 li
136.056 36.4456 li
137.83 39.0738 li
139.604 38.8687 li
141.378 26.7195 li
143.152 35.4984 li
144.926 33.123 li
146.7 34.358 li
148.474 33.8806 li
150.248 34.1586 li
152.022 33.8115 li
153.796 42.3807 li
155.57 37.2661 li
157.344 36.7442 li
159.119 36.7952 li
160.893 36.3693 li
162.667 38.0662 li
164.441 40.7679 li
166.215 38.6194 li
167.989 42.7469 li
169.763 37.2919 li
171.537 42.106 li
173.311 36.1771 li
175.085 34.3111 li
176.859 39.0573 li
178.633 28.7012 li
180.407 37.1599 li
182.181 32.7151 li
183.955 34.5074 li
185.729 33.2615 li
187.503 37.7115 li
189.277 30.4227 li
191.051 31.7605 li
192.825 30.6635 li
194.599 33.1834 li
196.373 37.1949 li
198.147 38.2804 li
199.921 35.0281 li
201.695 22.9053 li
203.47 39.9264 li
205.244 39.1572 li
207.018 25.4063 li
208.792 35.0799 li
210.566 50.3166 li
212.34 40.5012 li
214.114 35.4392 li
215.888 40.8767 li
217.662 33.3446 li
219.436 40.2701 li
221.21 37.3602 li
222.984 35.1929 li
224.758 32.8801 li
226.532 36.072 li
228.306 36.625 li
230.08 38.5173 li
231.854 36.2151 li
233.628 33.0307 li
235.402 33.2654 li
237.176 31.2213 li
238.95 34.579 li
240.724 31.8901 li
242.498 32.6689 li
244.272 31.856 li
246.046 29.7048 li
247.82 19.9389 li
249.595 38.3063 li
251.369 41.7565 li
253.143 42.9452 li
254.917 42.0657 li
256.691 42.9642 li
258.465 39.1496 li
260.239 39.733 li
262.013 32.6071 li
263.787 38.6652 li
265.561 34.6898 li
267.335 34.9561 li
269.109 42.6553 li
270.883 36.1857 li
272.657 33.8547 li
274.431 35.7643 li
276.205 34.0212 li
277.979 32.1273 li
279.753 31.9771 li
281.527 34.5067 li
283.301 36.3042 li
285.075 37.4759 li
286.849 32.5262 li
288.623 35.6682 li
290.397 34.5771 li
292.171 36.3972 li
293.945 36.5338 li
295.719 36.3501 li
297.493 33.6434 li
299.268 34.0804 li
301.042 37.1104 li
302.816 36.0724 li
304.59 36.2862 li
306.364 34.7964 li
308.138 34.8466 li
309.912 34.4381 li
311.686 42.4235 li
313.46 41.4075 li
315.234 40.4842 li
317.008 37.0302 li
318.782 35.5977 li
320.556 37.0831 li
322.33 33.7068 li
324.104 37.1649 li
325.878 37.1976 li
327.652 37.0347 li
329.426 36.6967 li
331.2 38.2533 li
332.974 36.0185 li
334.748 36.7469 li
336.522 35.7298 li
338.296 34.0309 li
340.07 35.6982 li
341.844 33.2038 li
343.618 21.051 li
345.393 36.2685 li
347.167 31.4437 li
348.941 35.2159 li
350.715 40.904 li
352.489 34.6416 li
354.263 32.9763 li
356.037 39.1226 li
357.811 35.6887 li
359.585 40.9539 li
361.359 44.4156 li
363.133 39.4691 li
364.907 37.7575 li
366.681 44.4014 li
368.455 41.0916 li
370.229 29.3113 li
372.003 42.8184 li
373.777 33.5378 li
375.551 31.6966 li
377.325 27.215 li
379.099 26.5745 li
380.873 27.0604 li
382.647 34.3514 li
384.421 36.3431 li
386.195 38.1298 li
387.969 42.084 li
389.743 45.2789 li
391.518 50.3225 li
393.292 48.0969 li
395.066 45.905 li
396.84 39.2472 li
398.614 37.6147 li
400.388 36.577 li
402.162 31.1483 li
403.936 32.1215 li
405.71 32.4282 li
407.484 32.6057 li
409.258 35.3115 li
411.032 36.1929 li
412.806 34.6671 li
414.58 38.4473 li
416.354 35.7543 li
418.128 35.704 li
419.902 33.2167 li
421.676 39.1096 li
423.45 37.2006 li
425.224 34.3715 li
426.998 34.874 li
428.772 33.4216 li
430.546 39.8854 li
432.32 38.4312 li
434.094 35.6719 li
435.868 35.9398 li
437.643 35.2206 li
439.417 29.2816 li
441.191 40.2255 li
442.965 27.9505 li
444.739 34.2944 li
446.513 36.5667 li
448.287 37.6076 li
450.061 54.2638 li
451.835 35.3997 li
453.609 26.205 li
455.383 41.4017 li
457.157 40.5452 li
458.931 18.9054 li
460.705 44.4208 li
462.479 28.9634 li
464.253 39.7455 li
466.027 42.0049 li
467.801 52.1302 li
469.575 43.0933 li
471.349 39.4003 li
473.123 47.5975 li
474.897 33.5251 li
476.671 30.9366 li
478.445 31.459 li
480.219 26.4932 li
481.993 26.6265 li
483.768 31.5292 li
485.542 34.428 li
487.316 35.1174 li
489.09 36.8089 li
490.864 37.4283 li
492.638 40.8163 li
494.412 39.0792 li
496.186 41.6755 li
497.96 38.9085 li
499.734 36.4229 li
501.508 39.4264 li
503.282 39.2556 li
505.056 35.708 li
506.83 39.9506 li
508.604 33.9274 li
510.378 40.1633 li
512.152 37.7193 li
513.926 38.3726 li
515.7 53.7235 li
517.474 34.615 li
519.248 32.2181 li
521.022 30.4758 li
522.796 33.6112 li
524.57 38.0197 li
526.344 37.9208 li
528.118 36.8046 li
529.893 41.7335 li
531.667 36.0516 li
533.441 34.3062 li
535.215 38.3264 li
536.989 35.117 li
538.763 36.8442 li
@
1 lj
10 ml
[] 0 dsh
77.5128 38.2601 mo
79.2868 37.9533 li
81.0608 36.9348 li
82.8349 35.5004 li
84.6089 34.8348 li
86.383 35.6902 li
88.157 37.1959 li
89.931 37.9188 li
91.7051 37.9011 li
93.4791 38.1882 li
95.2532 38.6488 li
97.0272 37.977 li
98.8012 36.3601 li
100.575 35.2661 li
102.349 34.3867 li
104.123 32.9228 li
105.897 32.5332 li
107.671 34.3431 li
109.445 36.936 li
111.219 38.2277 li
112.994 37.5936 li
114.768 36.2277 li
116.542 35.8825 li
118.316 36.9918 li
120.09 38.7136 li
121.864 40.0335 li
123.638 40.0562 li
125.412 38.415 li
127.186 35.8679 li
128.96 33.6036 li
130.734 32.6939 li
132.508 33.1723 li
134.282 34.4387 li
136.056 35.7671 li
137.83 36.6768 li
139.604 36.9084 li
141.378 36.7291 li
143.152 36.6805 li
144.926 36.8608 li
146.7 36.8667 li
148.474 36.4514 li
150.248 35.8693 li
152.022 35.5372 li
153.796 35.5605 li
155.57 35.7714 li
157.344 35.8289 li
159.119 35.9773 li
160.893 37.0073 li
162.667 38.8051 li
164.441 40.1646 li
166.215 40.4482 li
167.989 39.9233 li
169.763 39.096 li
171.537 38.2746 li
173.311 37.5892 li
175.085 36.9332 li
176.859 36.1074 li
178.633 35.0395 li
180.407 34.0753 li
182.181 33.6045 li
183.955 33.5898 li
185.729 33.7584 li
187.503 33.7455 li
189.277 33.2533 li
191.051 32.5839 li
192.825 32.5594 li
194.599 33.7074 li
196.373 35.2864 li
198.147 36.3389 li
199.921 36.7133 li
201.695 36.8701 li
203.47 36.9456 li
205.244 36.658 li
207.018 36.0717 li
208.792 35.6957 li
210.566 36.0209 li
212.34 36.9504 li
214.114 37.8516 li
215.888 38.2703 li
217.662 38.04 li
219.436 37.3178 li
221.21 36.4794 li
222.984 35.8215 li
224.758 35.3539 li
226.532 35.0645 li
228.306 34.9027 li
230.08 34.7339 li
231.854 34.4706 li
233.628 34.1224 li
235.402 33.6143 li
237.176 33.0235 li
238.95 32.4977 li
240.724 32.3053 li
242.498 32.5569 li
244.272 33.1915 li
246.046 34.0703 li
247.82 35.4604 li
249.595 37.6089 li
251.369 39.9995 li
253.143 41.7443 li
254.917 42.0335 li
256.691 40.942 li
258.465 39.0197 li
260.239 37.0444 li
262.013 35.5678 li
263.787 34.6537 li
265.561 34.1555 li
267.335 33.9332 li
269.109 33.9639 li
270.883 34.3188 li
272.657 34.7975 li
274.431 35.1283 li
276.205 35.1892 li
277.979 35.1439 li
279.753 35.2231 li
281.527 35.3863 li
283.301 35.4067 li
285.075 35.3039 li
286.849 35.3015 li
288.623 35.3925 li
290.397 35.4893 li
292.171 35.6463 li
293.945 35.9074 li
295.719 36.1135 li
297.493 36.0909 li
299.268 35.9898 li
301.042 36.0433 li
302.816 36.1931 li
304.59 36.3491 li
306.364 36.6583 li
308.138 37.0394 li
309.912 37.0596 li
311.686 36.6868 li
313.46 36.2393 li
315.234 35.8882 li
317.008 35.7664 li
318.782 35.8647 li
320.556 35.9376 li
322.33 35.9146 li
324.104 35.9032 li
325.878 35.9857 li
327.652 36.1121 li
329.426 36.3008 li
331.2 36.5329 li
332.974 36.7503 li
334.748 36.8536 li
336.522 36.8143 li
338.296 36.593 li
340.07 36.2519 li
341.844 36.0011 li
343.618 35.9519 li
345.393 35.9708 li
347.167 35.9412 li
348.941 35.8708 li
350.715 35.8981 li
352.489 36.1021 li
354.263 36.301 li
356.037 36.4366 li
357.811 36.7601 li
359.585 37.3503 li
361.359 37.9468 li
363.133 38.3772 li
364.907 38.6877 li
366.681 38.8336 li
368.455 38.5572 li
370.229 37.6273 li
372.003 36.0186 li
373.777 33.8851 li
375.551 31.5063 li
377.325 29.2972 li
379.099 27.9706 li
380.873 28.4333 li
382.647 30.782 li
384.421 34.0695 li
386.195 37.9246 li
387.969 42.1542 li
389.743 45.8793 li
391.518 47.9505 li
393.292 47.5613 li
395.066 45.1229 li
396.84 41.9487 li
398.614 38.6995 li
400.388 35.851 li
402.162 33.8966 li
403.936 33.0656 li
405.71 33.1888 li
407.484 33.8219 li
409.258 34.6245 li
411.032 35.3822 li
412.806 35.9309 li
414.58 35.961 li
416.354 35.2303 li
418.128 34.2792 li
419.902 34.1461 li
421.676 34.7192 li
423.45 35.3704 li
425.224 36.0944 li
426.998 36.8618 li
428.772 37.4962 li
430.546 37.7315 li
432.32 37.4926 li
434.094 36.7645 li
435.868 35.6801 li
437.643 34.6146 li
439.417 33.7091 li
441.191 33.0558 li
442.965 32.7794 li
444.739 32.8302 li
446.513 33.0317 li
448.287 33.6532 li
450.061 34.9045 li
451.835 36.8971 li
453.609 39.1284 li
455.383 40.7117 li
457.157 41.3041 li
458.931 41.4599 li
460.705 41.5912 li
462.479 41.7111 li
464.253 42.0317 li
466.027 42.4472 li
467.801 42.2362 li
469.575 41.1394 li
471.349 38.6911 li
473.123 35.6504 li
474.897 33.1213 li
476.671 31.4496 li
478.445 30.8253 li
480.219 31.1091 li
481.993 31.9459 li
483.768 32.3106 li
485.542 32.7428 li
487.316 33.6884 li
489.09 35.3533 li
490.864 37.1718 li
492.638 38.4957 li
494.412 39.14 li
496.186 39.5483 li
497.96 39.835 li
499.734 40.0831 li
501.508 40.0267 li
503.282 39.6027 li
505.056 38.7981 li
506.83 38.2792 li
508.604 37.6767 li
510.378 36.8652 li
512.152 36.1915 li
513.926 35.4393 li
515.7 34.3131 li
517.474 33.1144 li
519.248 32.6961 li
521.022 33.5764 li
522.796 35.1632 li
524.57 36.7721 li
526.344 38.0241 li
528.118 38.7073 li
529.893 38.7698 li
531.667 38.3226 li
533.441 37.6369 li
535.215 36.9511 li
536.989 36.4095 li
538.763 36.1616 li
@
2 lj
1 ml
[6 2.25 1.5 2.25 ] 0 dsh
77.5128 39.9395 mo
79.2868 35.4495 li
81.0608 35.126 li
82.8349 37.618 li
84.6089 37.6209 li
86.383 35.8787 li
88.157 34.7719 li
89.931 42.075 li
91.7051 39.7983 li
93.4791 37.5814 li
95.2532 39.5062 li
97.0272 39.191 li
98.8012 34.1595 li
100.575 35.0594 li
102.349 35.3549 li
104.123 20.137 li
105.897 32.4933 li
107.671 31.7537 li
109.445 35.5707 li
111.219 33.1937 li
112.994 37.5735 li
114.768 36.6578 li
116.542 32.6952 li
118.316 38.9699 li
120.09 39.9364 li
121.864 38.1375 li
123.638 38.3415 li
125.412 36.8199 li
127.186 35.4919 li
128.96 33.2203 li
130.734 27.3286 li
132.508 35.5245 li
134.282 33.157 li
136.056 36.4456 li
137.83 39.0738 li
139.604 38.8687 li
141.378 26.7195 li
143.152 35.4984 li
144.926 33.123 li
146.7 34.358 li
148.474 33.8806 li
150.248 34.1586 li
152.022 33.8115 li
153.796 42.3807 li
155.57 37.2661 li
157.344 36.7442 li
159.119 36.7952 li
160.893 36.3693 li
162.667 38.0662 li
164.441 40.7679 li
166.215 38.6194 li
167.989 42.7469 li
169.763 37.2919 li
171.537 42.106 li
173.311 36.1771 li
175.085 34.3111 li
176.859 39.0573 li
178.633 28.7012 li
180.407 37.1599 li
182.181 32.7151 li
183.955 34.5074 li
185.729 33.2615 li
187.503 37.7115 li
189.277 30.4227 li
191.051 31.7605 li
192.825 30.6635 li
194.599 33.1834 li
196.373 37.1949 li
198.147 38.2804 li
199.921 35.0281 li
201.695 22.9053 li
203.47 39.9264 li
205.244 39.1572 li
207.018 25.4063 li
208.792 35.0799 li
210.566 50.3166 li
212.34 40.5012 li
214.114 35.4392 li
215.888 40.8767 li
217.662 33.3446 li
219.436 40.2701 li
221.21 37.3602 li
222.984 35.1929 li
224.758 32.8801 li
226.532 36.072 li
228.306 36.625 li
230.08 38.5173 li
231.854 36.2151 li
233.628 33.0307 li
235.402 33.2654 li
237.176 31.2213 li
238.95 34.579 li
240.724 31.8901 li
242.498 32.6689 li
244.272 31.856 li
246.046 29.7048 li
247.82 19.9389 li
249.595 38.3063 li
251.369 41.7565 li
253.143 42.9452 li
254.917 42.0657 li
256.691 42.9642 li
258.465 39.1496 li
260.239 39.733 li
262.013 32.6071 li
263.787 38.6652 li
265.561 34.6898 li
267.335 34.9561 li
269.109 42.6553 li
270.883 36.1857 li
272.657 33.8547 li
274.431 35.7643 li
276.205 34.0212 li
277.979 32.1273 li
279.753 31.9771 li
281.527 34.5067 li
283.301 36.3042 li
285.075 37.4759 li
286.849 32.5262 li
288.623 35.6682 li
290.397 34.5771 li
292.171 36.3972 li
293.945 36.5338 li
295.719 36.3501 li
297.493 33.6434 li
299.268 34.0804 li
301.042 37.1104 li
302.816 36.0724 li
304.59 36.2862 li
306.364 34.7964 li
308.138 34.8466 li
309.912 34.4381 li
311.686 42.4235 li
313.46 41.4075 li
315.234 40.4842 li
317.008 37.0302 li
318.782 35.5977 li
320.556 37.0831 li
322.33 33.7068 li
324.104 37.1649 li
325.878 37.1976 li
327.652 37.0347 li
329.426 36.6967 li
331.2 38.2533 li
332.974 36.0185 li
334.748 36.7469 li
336.522 35.7298 li
338.296 34.0309 li
340.07 35.6982 li
341.844 33.2038 li
343.618 21.051 li
345.393 36.2685 li
347.167 31.4437 li
348.941 35.2159 li
350.715 40.904 li
352.489 34.6416 li
354.263 32.9763 li
356.037 39.1226 li
357.811 35.6887 li
359.585 40.9539 li
361.359 44.4156 li
363.133 39.4691 li
364.907 37.7575 li
366.681 44.4014 li
368.455 41.0916 li
370.229 29.3113 li
372.003 42.8184 li
373.777 33.5378 li
375.551 31.6966 li
377.325 27.215 li
379.099 26.5745 li
380.873 27.0604 li
382.647 34.3514 li
384.421 36.3431 li
386.195 38.1298 li
387.969 42.084 li
389.743 45.2789 li
391.518 50.3225 li
393.292 48.0969 li
395.066 45.905 li
396.84 39.2472 li
398.614 37.6147 li
400.388 36.577 li
402.162 31.1483 li
403.936 32.1215 li
405.71 32.4282 li
407.484 32.6057 li
409.258 35.3115 li
411.032 36.1929 li
412.806 34.6671 li
414.58 38.4473 li
416.354 35.7543 li
418.128 35.704 li
419.902 33.2167 li
421.676 39.1096 li
423.45 37.2006 li
425.224 34.3715 li
426.998 34.874 li
428.772 33.4216 li
430.546 39.8854 li
432.32 38.4312 li
434.094 35.6719 li
435.868 35.9398 li
437.643 35.2206 li
439.417 29.2816 li
441.191 40.2255 li
442.965 27.9505 li
444.739 34.2944 li
446.513 36.5667 li
448.287 37.6076 li
450.061 54.2638 li
451.835 35.3997 li
453.609 26.205 li
455.383 41.4017 li
457.157 40.5452 li
458.931 18.9054 li
460.705 44.4208 li
462.479 28.9634 li
464.253 39.7455 li
466.027 42.0049 li
467.801 52.1302 li
469.575 43.0933 li
471.349 39.4003 li
473.123 47.5975 li
474.897 33.5251 li
476.671 30.9366 li
478.445 31.459 li
480.219 26.4932 li
481.993 26.6265 li
483.768 31.5292 li
485.542 34.428 li
487.316 35.1174 li
489.09 36.8089 li
490.864 37.4283 li
492.638 40.8163 li
494.412 39.0792 li
496.186 41.6755 li
497.96 38.9085 li
499.734 36.4229 li
501.508 39.4264 li
503.282 39.2556 li
505.056 35.708 li
506.83 39.9506 li
508.604 33.9274 li
510.378 40.1633 li
512.152 37.7193 li
513.926 38.3726 li
515.7 53.7235 li
517.474 34.615 li
519.248 32.2181 li
521.022 30.4758 li
522.796 33.6112 li
524.57 38.0197 li
526.344 37.9208 li
528.118 36.8046 li
529.893 41.7335 li
531.667 36.0516 li
533.441 34.3062 li
535.215 38.3264 li
536.989 35.117 li
538.763 36.8442 li
@
91.0128 31.4911 mo
91.0128 5.24115 li
179.513 5.24115 li
179.513 31.4911 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
1 /0 /CSD get_res sepcs
1 sep
%%IncludeResource: font Helvetica
/MPSWGR+Helvetica*1 
[32{/.notdef}rp /space 12{/.notdef}rp /hyphen 2{/.notdef}rp /zero /one /two 
/three /four /five 43{/.notdef}rp /a /.notdef /c /d 
/e 6{/.notdef}rp /l /.notdef /n 4{/.notdef}rp /s /t 
139{/.notdef}rp]
MPSWGR+Helvetica nf
MPSWGR+Helvetica*1 [8.00025 0 0 -8.00025 0 0 ]msf
126.263 15.8444 mo
(clean dataset)
[4.00011 1.77594 4.44814 4.44814 4.44814 2.22408 4.44814 4.44814 2.22406 4.44815 4.00012 4.44814 
0 ]xsh
1 lj
10 ml
[] 0 dsh
94.0128 12.4694 mo
124.013 12.4694 li
@
%%IncludeResource: font Helvetica
/MPSWGR+Helvetica*1 
[32{/.notdef}rp /space 12{/.notdef}rp /hyphen 2{/.notdef}rp /zero /one /two 
/three /four /five 24{/.notdef}rp /N 18{/.notdef}rp /a /.notdef 
/c /d /e 3{/.notdef}rp /i 2{/.notdef}rp /l /.notdef 
/n /o 3{/.notdef}rp /s /t 4{/.notdef}rp /y 134{/.notdef}rp]
MPSWGR+Helvetica nf
MPSWGR+Helvetica*1 [8.00025 0 0 -8.00025 0 0 ]msf
126.263 27.6379 mo
(Noisy dataset)
[5.77605 4.44814 1.77594 4.00012 4.00012 2.22408 4.44814 4.44814 2.22406 4.44814 4.00014 4.44814 
0 ]xsh
2 lj
1 ml
[6 2.25 1.5 2.25 ] 0 dsh
94.0128 24.2629 mo
124.013 24.2629 li
@
.5 lw
0 lj
10 ml
[] 0 dsh
91.0128 31.4911 mo
91.0128 5.24115 li
179.513 5.24115 li
179.513 31.4911 li
cp
1 /0 /CSD get_res sepcs
.851 sep
@
77.5128 157.491 mo
538.763 157.491 li
538.763 104.241 li
77.5128 104.241 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
2 lc
1 lj
77.5128 157.491 mo
538.763 157.491 li
1 /0 /CSD get_res sepcs
.851 sep
@
77.5128 104.241 mo
538.763 104.241 li
@
77.5128 157.491 mo
77.5128 152.879 li
@
121.864 157.491 mo
121.864 152.879 li
@
166.215 157.491 mo
166.215 152.879 li
@
210.566 157.491 mo
210.566 152.879 li
@
254.917 157.491 mo
254.917 152.879 li
@
299.268 157.491 mo
299.268 152.879 li
@
343.618 157.491 mo
343.618 152.879 li
@
387.969 157.491 mo
387.969 152.879 li
@
432.32 157.491 mo
432.32 152.879 li
@
476.671 157.491 mo
476.671 152.879 li
@
521.022 157.491 mo
521.022 152.879 li
@
77.5128 104.241 mo
77.5128 108.854 li
@
121.864 104.241 mo
121.864 108.854 li
@
166.215 104.241 mo
166.215 108.854 li
@
210.566 104.241 mo
210.566 108.854 li
@
254.917 104.241 mo
254.917 108.854 li
@
299.268 104.241 mo
299.268 108.854 li
@
343.618 104.241 mo
343.618 108.854 li
@
387.969 104.241 mo
387.969 108.854 li
@
432.32 104.241 mo
432.32 108.854 li
@
476.671 104.241 mo
476.671 108.854 li
@
521.022 104.241 mo
521.022 108.854 li
@
MPSWGR+Helvetica*1 [12 0 0 -12 0 0 ]msf
74.1378 174.641 mo
(0)sh
115.114 174.641 mo
(50)
[6.672 0 ]xsh
156.09 174.641 mo
(100)
[6.672 6.672 0 ]xsh
200.441 174.641 mo
(150)
[6.672 6.672 0 ]xsh
244.792 174.641 mo
(200)
[6.672 6.67198 0 ]xsh
289.143 174.641 mo
(250)
[6.672 6.672 0 ]xsh
333.494 174.641 mo
(300)
[6.672 6.672 0 ]xsh
377.845 174.641 mo
(350)
[6.672 6.672 0 ]xsh
422.195 174.641 mo
(400)
[6.672 6.672 0 ]xsh
466.546 174.641 mo
(450)
[6.672 6.672 0 ]xsh
510.897 174.641 mo
(500)
[6.672 6.672 0 ]xsh
MPSWGS+Helvetica-Bold*1 [12 0 0 -12 0 0 ]msf
292.013 191.391 mo
(Trace)
[7.33191 4.66791 6.672 6.672 0 ]xsh
77.5128 157.491 mo
77.5128 104.241 li
@
538.763 157.491 mo
538.763 104.241 li
@
77.5128 157.491 mo
82.1253 157.491 li
@
77.5128 136.191 mo
82.1253 136.191 li
@
77.5128 114.891 mo
82.1253 114.891 li
@
538.763 157.491 mo
534.15 157.491 li
@
538.763 136.191 mo
534.15 136.191 li
@
538.763 114.891 mo
534.15 114.891 li
@
MPSWGR+Helvetica*1 [12 0 0 -12 0 0 ]msf
55.1128 162.366 mo
(-10)
[3.99591 6.672 0 ]xsh
66.3628 141.066 mo
(0)sh
59.6128 119.766 mo
(10)
[6.672 0 ]xsh
MPSWGS+Helvetica-Bold*1 [-5.2e-7 -12 -12 5.2e-7 0 0 ]msf
49.1128 160.491 mo
(Amplitude)
[-8.66382 -10.6679 -7.33191 -3.336 -3.336 -3.99591 -7.33191 -7.33191 0 ]ysh
1 lw
0 lc
77.5128 138.01 mo
79.2868 137.703 li
81.0608 136.685 li
82.8349 135.25 li
84.6089 134.585 li
86.383 135.44 li
88.157 136.946 li
89.931 137.669 li
91.7051 137.651 li
93.4791 137.938 li
95.2532 138.399 li
97.0272 137.727 li
98.8012 136.11 li
100.575 135.016 li
102.349 134.137 li
104.123 132.673 li
105.897 132.283 li
107.671 134.093 li
109.445 136.686 li
111.219 137.978 li
112.994 137.344 li
114.768 135.978 li
116.542 135.633 li
118.316 136.742 li
120.09 138.464 li
121.864 139.784 li
123.638 139.806 li
125.412 138.165 li
127.186 135.618 li
128.96 133.354 li
130.734 132.444 li
132.508 132.922 li
134.282 134.189 li
136.056 135.517 li
137.83 136.427 li
139.604 136.658 li
141.378 136.479 li
143.152 136.43 li
144.926 136.611 li
146.7 136.617 li
148.474 136.201 li
150.248 135.619 li
152.022 135.287 li
153.796 135.311 li
155.57 135.521 li
157.344 135.579 li
159.119 135.727 li
160.893 136.757 li
162.667 138.555 li
164.441 139.915 li
166.215 140.198 li
167.989 139.673 li
169.763 138.846 li
171.537 138.025 li
173.311 137.339 li
175.085 136.683 li
176.859 135.857 li
178.633 134.789 li
180.407 133.825 li
182.181 133.354 li
183.955 133.34 li
185.729 133.508 li
187.503 133.495 li
189.277 133.003 li
191.051 132.334 li
192.825 132.309 li
194.599 133.457 li
196.373 135.036 li
198.147 136.089 li
199.921 136.463 li
201.695 136.62 li
203.47 136.696 li
205.244 136.408 li
207.018 135.822 li
208.792 135.446 li
210.566 135.771 li
212.34 136.7 li
214.114 137.602 li
215.888 138.02 li
217.662 137.79 li
219.436 137.068 li
221.21 136.229 li
222.984 135.571 li
224.758 135.104 li
226.532 134.814 li
228.306 134.653 li
230.08 134.484 li
231.854 134.221 li
233.628 133.872 li
235.402 133.364 li
237.176 132.773 li
238.95 132.248 li
240.724 132.055 li
242.498 132.307 li
244.272 132.942 li
246.046 133.82 li
247.82 135.21 li
249.595 137.359 li
251.369 139.749 li
253.143 141.494 li
254.917 141.784 li
256.691 140.692 li
258.465 138.77 li
260.239 136.794 li
262.013 135.318 li
263.787 134.404 li
265.561 133.905 li
267.335 133.683 li
269.109 133.714 li
270.883 134.069 li
272.657 134.548 li
274.431 134.878 li
276.205 134.939 li
277.979 134.894 li
279.753 134.973 li
281.527 135.136 li
283.301 135.157 li
285.075 135.054 li
286.849 135.052 li
288.623 135.143 li
290.397 135.239 li
292.171 135.396 li
293.945 135.657 li
295.719 135.863 li
297.493 135.841 li
299.268 135.74 li
301.042 135.793 li
302.816 135.943 li
304.59 136.099 li
306.364 136.408 li
308.138 136.789 li
309.912 136.81 li
311.686 136.437 li
313.46 135.989 li
315.234 135.638 li
317.008 135.516 li
318.782 135.615 li
320.556 135.688 li
322.33 135.665 li
324.104 135.653 li
325.878 135.736 li
327.652 135.862 li
329.426 136.051 li
331.2 136.283 li
332.974 136.5 li
334.748 136.604 li
336.522 136.564 li
338.296 136.343 li
340.07 136.002 li
341.844 135.751 li
343.618 135.702 li
345.393 135.721 li
347.167 135.691 li
348.941 135.621 li
350.715 135.648 li
352.489 135.852 li
354.263 136.051 li
356.037 136.187 li
357.811 136.51 li
359.585 137.1 li
361.359 137.697 li
363.133 138.127 li
364.907 138.438 li
366.681 138.584 li
368.455 138.307 li
370.229 137.377 li
372.003 135.769 li
373.777 133.635 li
375.551 131.256 li
377.325 129.047 li
379.099 127.721 li
380.873 128.183 li
382.647 130.532 li
384.421 133.82 li
386.195 137.675 li
387.969 141.904 li
389.743 145.629 li
391.518 147.701 li
393.292 147.311 li
395.066 144.873 li
396.84 141.699 li
398.614 138.45 li
400.388 135.601 li
402.162 133.647 li
403.936 132.816 li
405.71 132.939 li
407.484 133.572 li
409.258 134.374 li
411.032 135.132 li
412.806 135.681 li
414.58 135.711 li
416.354 134.98 li
418.128 134.029 li
419.902 133.896 li
421.676 134.469 li
423.45 135.12 li
425.224 135.844 li
426.998 136.612 li
428.772 137.246 li
430.546 137.482 li
432.32 137.243 li
434.094 136.515 li
435.868 135.43 li
437.643 134.365 li
439.417 133.459 li
441.191 132.806 li
442.965 132.529 li
444.739 132.58 li
446.513 132.782 li
448.287 133.403 li
450.061 134.654 li
451.835 136.647 li
453.609 138.878 li
455.383 140.462 li
457.157 141.054 li
458.931 141.21 li
460.705 141.341 li
462.479 141.461 li
464.253 141.782 li
466.027 142.197 li
467.801 141.986 li
469.575 140.889 li
471.349 138.441 li
473.123 135.4 li
474.897 132.871 li
476.671 131.2 li
478.445 130.575 li
480.219 130.859 li
481.993 131.696 li
483.768 132.061 li
485.542 132.493 li
487.316 133.438 li
489.09 135.103 li
490.864 136.922 li
492.638 138.246 li
494.412 138.89 li
496.186 139.298 li
497.96 139.585 li
499.734 139.833 li
501.508 139.777 li
503.282 139.353 li
505.056 138.548 li
506.83 138.029 li
508.604 137.427 li
510.378 136.615 li
512.152 135.942 li
513.926 135.189 li
515.7 134.063 li
517.474 132.864 li
519.248 132.446 li
521.022 133.326 li
522.796 134.913 li
524.57 136.522 li
526.344 137.774 li
528.118 138.457 li
529.893 138.52 li
531.667 138.073 li
533.441 137.387 li
535.215 136.701 li
536.989 136.159 li
538.763 135.912 li
1 /0 /CSD get_res sepcs
1 sep
@
2 lj
1 ml
[6 2.25 1.5 2.25 ] 0 dsh
77.5128 137.625 mo
79.2868 137.258 li
81.0608 136.334 li
82.8349 134.227 li
84.6089 134.538 li
86.383 134.473 li
88.157 135.844 li
89.931 136.774 li
91.7051 137.576 li
93.4791 137.363 li
95.2532 137.712 li
97.0272 136.181 li
98.8012 136.67 li
100.575 134.917 li
102.349 135.294 li
104.123 133.385 li
105.897 133.316 li
107.671 135.964 li
109.445 136.523 li
111.219 138.455 li
112.994 136.763 li
114.768 135.524 li
116.542 134.914 li
118.316 135.421 li
120.09 137.183 li
121.864 138.446 li
123.638 138.262 li
125.412 137.419 li
127.186 137.091 li
128.96 134.988 li
130.734 133.673 li
132.508 134.128 li
134.282 134.484 li
136.056 135.156 li
137.83 135.974 li
139.604 135.859 li
141.378 137.113 li
143.152 135.488 li
144.926 136.251 li
146.7 136.827 li
148.474 135.787 li
150.248 133.892 li
152.022 135.96 li
153.796 134.016 li
155.57 135.122 li
157.344 137.246 li
159.119 136.474 li
160.893 136.116 li
162.667 137.443 li
164.441 138.014 li
166.215 137.74 li
167.989 138.172 li
169.763 137.741 li
171.537 137.617 li
173.311 138.692 li
175.085 136.052 li
176.859 134.57 li
178.633 136.154 li
180.407 133.68 li
182.181 134.317 li
183.955 135.146 li
185.729 135.109 li
187.503 134.874 li
189.277 134.407 li
191.051 133.594 li
192.825 133.414 li
194.599 135.369 li
196.373 135.532 li
198.147 135.575 li
199.921 135.127 li
201.695 135.526 li
203.47 133.805 li
205.244 136.139 li
207.018 136.072 li
208.792 135.906 li
210.566 137.004 li
212.34 137.065 li
214.114 135.89 li
215.888 138.714 li
217.662 137.582 li
219.436 137.139 li
221.21 136.456 li
222.984 135.6 li
224.758 135.352 li
226.532 135.025 li
228.306 135.813 li
230.08 136.635 li
231.854 135.249 li
233.628 135.914 li
235.402 134.773 li
237.176 133.365 li
238.95 133.624 li
240.724 133.5 li
242.498 133.815 li
244.272 134.601 li
246.046 133.716 li
247.82 135.042 li
249.595 136.178 li
251.369 138.672 li
253.143 140.544 li
254.917 139.777 li
256.691 139.402 li
258.465 139.102 li
260.239 137.204 li
262.013 135.897 li
263.787 136.011 li
265.561 136.11 li
267.335 137.122 li
269.109 135.135 li
270.883 135.896 li
272.657 134.793 li
274.431 135.334 li
276.205 135.332 li
277.979 135.672 li
279.753 136.125 li
281.527 135.442 li
283.301 135.695 li
285.075 135.076 li
286.849 136.01 li
288.623 135.479 li
290.397 136.322 li
292.171 135.834 li
293.945 135.303 li
295.719 135.72 li
297.493 135.86 li
299.268 135.123 li
301.042 136.238 li
302.816 135.868 li
304.59 135.775 li
306.364 135.923 li
308.138 136.412 li
309.912 137.173 li
311.686 137.113 li
313.46 136.997 li
315.234 136.155 li
317.008 135.529 li
318.782 135.085 li
320.556 134.763 li
322.33 135.451 li
324.104 135.084 li
325.878 136.094 li
327.652 135.353 li
329.426 136.026 li
331.2 135.694 li
332.974 136.477 li
334.748 135.908 li
336.522 136.484 li
338.296 134.941 li
340.07 135.083 li
341.844 135.63 li
343.618 134.652 li
345.393 136.68 li
347.167 134.997 li
348.941 137.683 li
350.715 136.422 li
352.489 135.736 li
354.263 136.274 li
356.037 135.372 li
357.811 137.675 li
359.585 139.499 li
361.359 138.159 li
363.133 138.787 li
364.907 139.388 li
366.681 138.097 li
368.455 136.025 li
370.229 136.151 li
372.003 134.101 li
373.777 132.103 li
375.551 131.152 li
377.325 130.419 li
379.099 130.801 li
380.873 131.967 li
382.647 132.157 li
384.421 135.322 li
386.195 137.192 li
387.969 139.191 li
389.743 142.165 li
391.518 142.895 li
393.292 143.333 li
395.066 142.359 li
396.84 140.476 li
398.614 138.548 li
400.388 135.999 li
402.162 134.764 li
403.936 133.486 li
405.71 133.73 li
407.484 133.503 li
409.258 135.154 li
411.032 135.85 li
412.806 136.44 li
414.58 135.441 li
416.354 135.284 li
418.128 135.095 li
419.902 133.942 li
421.676 135.252 li
423.45 135.979 li
425.224 135.288 li
426.998 136.888 li
428.772 136.124 li
430.546 137.83 li
432.32 136.545 li
434.094 138.099 li
435.868 135.434 li
437.643 135.244 li
439.417 132.753 li
441.191 135.003 li
442.965 133.075 li
444.739 134.05 li
446.513 133.685 li
448.287 134.298 li
450.061 134.611 li
451.835 135.531 li
453.609 136.99 li
455.383 137.361 li
457.157 140.836 li
458.931 140.816 li
460.705 138.575 li
462.479 136.679 li
464.253 137.5 li
466.027 138.935 li
467.801 140.87 li
469.575 139.17 li
471.349 135.399 li
473.123 134.769 li
474.897 132.741 li
476.671 133.486 li
478.445 132.215 li
480.219 133.845 li
481.993 134.994 li
483.768 135.232 li
485.542 134.271 li
487.316 136.053 li
489.09 136.604 li
490.864 136.195 li
492.638 136.784 li
494.412 137.378 li
496.186 136.892 li
497.96 137.714 li
499.734 138.143 li
501.508 137.573 li
503.282 138.435 li
505.056 137.501 li
506.83 135.42 li
508.604 136.521 li
510.378 135.389 li
512.152 135.597 li
513.926 134.096 li
515.7 134.783 li
517.474 133.147 li
519.248 134.321 li
521.022 135.181 li
522.796 134.989 li
524.57 137.158 li
526.344 137.403 li
528.118 138.089 li
529.893 137.344 li
531.667 137.44 li
533.441 137.006 li
535.215 136.615 li
536.989 136.321 li
538.763 135.87 li
@
1 lj
10 ml
[] 0 dsh
77.5128 138.01 mo
79.2868 137.703 li
81.0608 136.685 li
82.8349 135.25 li
84.6089 134.585 li
86.383 135.44 li
88.157 136.946 li
89.931 137.669 li
91.7051 137.651 li
93.4791 137.938 li
95.2532 138.399 li
97.0272 137.727 li
98.8012 136.11 li
100.575 135.016 li
102.349 134.137 li
104.123 132.673 li
105.897 132.283 li
107.671 134.093 li
109.445 136.686 li
111.219 137.978 li
112.994 137.344 li
114.768 135.978 li
116.542 135.633 li
118.316 136.742 li
120.09 138.464 li
121.864 139.784 li
123.638 139.806 li
125.412 138.165 li
127.186 135.618 li
128.96 133.354 li
130.734 132.444 li
132.508 132.922 li
134.282 134.189 li
136.056 135.517 li
137.83 136.427 li
139.604 136.658 li
141.378 136.479 li
143.152 136.43 li
144.926 136.611 li
146.7 136.617 li
148.474 136.201 li
150.248 135.619 li
152.022 135.287 li
153.796 135.311 li
155.57 135.521 li
157.344 135.579 li
159.119 135.727 li
160.893 136.757 li
162.667 138.555 li
164.441 139.915 li
166.215 140.198 li
167.989 139.673 li
169.763 138.846 li
171.537 138.025 li
173.311 137.339 li
175.085 136.683 li
176.859 135.857 li
178.633 134.789 li
180.407 133.825 li
182.181 133.354 li
183.955 133.34 li
185.729 133.508 li
187.503 133.495 li
189.277 133.003 li
191.051 132.334 li
192.825 132.309 li
194.599 133.457 li
196.373 135.036 li
198.147 136.089 li
199.921 136.463 li
201.695 136.62 li
203.47 136.696 li
205.244 136.408 li
207.018 135.822 li
208.792 135.446 li
210.566 135.771 li
212.34 136.7 li
214.114 137.602 li
215.888 138.02 li
217.662 137.79 li
219.436 137.068 li
221.21 136.229 li
222.984 135.571 li
224.758 135.104 li
226.532 134.814 li
228.306 134.653 li
230.08 134.484 li
231.854 134.221 li
233.628 133.872 li
235.402 133.364 li
237.176 132.773 li
238.95 132.248 li
240.724 132.055 li
242.498 132.307 li
244.272 132.942 li
246.046 133.82 li
247.82 135.21 li
249.595 137.359 li
251.369 139.749 li
253.143 141.494 li
254.917 141.784 li
256.691 140.692 li
258.465 138.77 li
260.239 136.794 li
262.013 135.318 li
263.787 134.404 li
265.561 133.905 li
267.335 133.683 li
269.109 133.714 li
270.883 134.069 li
272.657 134.548 li
274.431 134.878 li
276.205 134.939 li
277.979 134.894 li
279.753 134.973 li
281.527 135.136 li
283.301 135.157 li
285.075 135.054 li
286.849 135.052 li
288.623 135.143 li
290.397 135.239 li
292.171 135.396 li
293.945 135.657 li
295.719 135.863 li
297.493 135.841 li
299.268 135.74 li
301.042 135.793 li
302.816 135.943 li
304.59 136.099 li
306.364 136.408 li
308.138 136.789 li
309.912 136.81 li
311.686 136.437 li
313.46 135.989 li
315.234 135.638 li
317.008 135.516 li
318.782 135.615 li
320.556 135.688 li
322.33 135.665 li
324.104 135.653 li
325.878 135.736 li
327.652 135.862 li
329.426 136.051 li
331.2 136.283 li
332.974 136.5 li
334.748 136.604 li
336.522 136.564 li
338.296 136.343 li
340.07 136.002 li
341.844 135.751 li
343.618 135.702 li
345.393 135.721 li
347.167 135.691 li
348.941 135.621 li
350.715 135.648 li
352.489 135.852 li
354.263 136.051 li
356.037 136.187 li
357.811 136.51 li
359.585 137.1 li
361.359 137.697 li
363.133 138.127 li
364.907 138.438 li
366.681 138.584 li
368.455 138.307 li
370.229 137.377 li
372.003 135.769 li
373.777 133.635 li
375.551 131.256 li
377.325 129.047 li
379.099 127.721 li
380.873 128.183 li
382.647 130.532 li
384.421 133.82 li
386.195 137.675 li
387.969 141.904 li
389.743 145.629 li
391.518 147.701 li
393.292 147.311 li
395.066 144.873 li
396.84 141.699 li
398.614 138.45 li
400.388 135.601 li
402.162 133.647 li
403.936 132.816 li
405.71 132.939 li
407.484 133.572 li
409.258 134.374 li
411.032 135.132 li
412.806 135.681 li
414.58 135.711 li
416.354 134.98 li
418.128 134.029 li
419.902 133.896 li
421.676 134.469 li
423.45 135.12 li
425.224 135.844 li
426.998 136.612 li
428.772 137.246 li
430.546 137.482 li
432.32 137.243 li
434.094 136.515 li
435.868 135.43 li
437.643 134.365 li
439.417 133.459 li
441.191 132.806 li
442.965 132.529 li
444.739 132.58 li
446.513 132.782 li
448.287 133.403 li
450.061 134.654 li
451.835 136.647 li
453.609 138.878 li
455.383 140.462 li
457.157 141.054 li
458.931 141.21 li
460.705 141.341 li
462.479 141.461 li
464.253 141.782 li
466.027 142.197 li
467.801 141.986 li
469.575 140.889 li
471.349 138.441 li
473.123 135.4 li
474.897 132.871 li
476.671 131.2 li
478.445 130.575 li
480.219 130.859 li
481.993 131.696 li
483.768 132.061 li
485.542 132.493 li
487.316 133.438 li
489.09 135.103 li
490.864 136.922 li
492.638 138.246 li
494.412 138.89 li
496.186 139.298 li
497.96 139.585 li
499.734 139.833 li
501.508 139.777 li
503.282 139.353 li
505.056 138.548 li
506.83 138.029 li
508.604 137.427 li
510.378 136.615 li
512.152 135.942 li
513.926 135.189 li
515.7 134.063 li
517.474 132.864 li
519.248 132.446 li
521.022 133.326 li
522.796 134.913 li
524.57 136.522 li
526.344 137.774 li
528.118 138.457 li
529.893 138.52 li
531.667 138.073 li
533.441 137.387 li
535.215 136.701 li
536.989 136.159 li
538.763 135.912 li
@
2 lj
1 ml
[6 2.25 1.5 2.25 ] 0 dsh
77.5128 137.625 mo
79.2868 137.258 li
81.0608 136.334 li
82.8349 134.227 li
84.6089 134.538 li
86.383 134.473 li
88.157 135.844 li
89.931 136.774 li
91.7051 137.576 li
93.4791 137.363 li
95.2532 137.712 li
97.0272 136.181 li
98.8012 136.67 li
100.575 134.917 li
102.349 135.294 li
104.123 133.385 li
105.897 133.316 li
107.671 135.964 li
109.445 136.523 li
111.219 138.455 li
112.994 136.763 li
114.768 135.524 li
116.542 134.914 li
118.316 135.421 li
120.09 137.183 li
121.864 138.446 li
123.638 138.262 li
125.412 137.419 li
127.186 137.091 li
128.96 134.988 li
130.734 133.673 li
132.508 134.128 li
134.282 134.484 li
136.056 135.156 li
137.83 135.974 li
139.604 135.859 li
141.378 137.113 li
143.152 135.488 li
144.926 136.251 li
146.7 136.827 li
148.474 135.787 li
150.248 133.892 li
152.022 135.96 li
153.796 134.016 li
155.57 135.122 li
157.344 137.246 li
159.119 136.474 li
160.893 136.116 li
162.667 137.443 li
164.441 138.014 li
166.215 137.74 li
167.989 138.172 li
169.763 137.741 li
171.537 137.617 li
173.311 138.692 li
175.085 136.052 li
176.859 134.57 li
178.633 136.154 li
180.407 133.68 li
182.181 134.317 li
183.955 135.146 li
185.729 135.109 li
187.503 134.874 li
189.277 134.407 li
191.051 133.594 li
192.825 133.414 li
194.599 135.369 li
196.373 135.532 li
198.147 135.575 li
199.921 135.127 li
201.695 135.526 li
203.47 133.805 li
205.244 136.139 li
207.018 136.072 li
208.792 135.906 li
210.566 137.004 li
212.34 137.065 li
214.114 135.89 li
215.888 138.714 li
217.662 137.582 li
219.436 137.139 li
221.21 136.456 li
222.984 135.6 li
224.758 135.352 li
226.532 135.025 li
228.306 135.813 li
230.08 136.635 li
231.854 135.249 li
233.628 135.914 li
235.402 134.773 li
237.176 133.365 li
238.95 133.624 li
240.724 133.5 li
242.498 133.815 li
244.272 134.601 li
246.046 133.716 li
247.82 135.042 li
249.595 136.178 li
251.369 138.672 li
253.143 140.544 li
254.917 139.777 li
256.691 139.402 li
258.465 139.102 li
260.239 137.204 li
262.013 135.897 li
263.787 136.011 li
265.561 136.11 li
267.335 137.122 li
269.109 135.135 li
270.883 135.896 li
272.657 134.793 li
274.431 135.334 li
276.205 135.332 li
277.979 135.672 li
279.753 136.125 li
281.527 135.442 li
283.301 135.695 li
285.075 135.076 li
286.849 136.01 li
288.623 135.479 li
290.397 136.322 li
292.171 135.834 li
293.945 135.303 li
295.719 135.72 li
297.493 135.86 li
299.268 135.123 li
301.042 136.238 li
302.816 135.868 li
304.59 135.775 li
306.364 135.923 li
308.138 136.412 li
309.912 137.173 li
311.686 137.113 li
313.46 136.997 li
315.234 136.155 li
317.008 135.529 li
318.782 135.085 li
320.556 134.763 li
322.33 135.451 li
324.104 135.084 li
325.878 136.094 li
327.652 135.353 li
329.426 136.026 li
331.2 135.694 li
332.974 136.477 li
334.748 135.908 li
336.522 136.484 li
338.296 134.941 li
340.07 135.083 li
341.844 135.63 li
343.618 134.652 li
345.393 136.68 li
347.167 134.997 li
348.941 137.683 li
350.715 136.422 li
352.489 135.736 li
354.263 136.274 li
356.037 135.372 li
357.811 137.675 li
359.585 139.499 li
361.359 138.159 li
363.133 138.787 li
364.907 139.388 li
366.681 138.097 li
368.455 136.025 li
370.229 136.151 li
372.003 134.101 li
373.777 132.103 li
375.551 131.152 li
377.325 130.419 li
379.099 130.801 li
380.873 131.967 li
382.647 132.157 li
384.421 135.322 li
386.195 137.192 li
387.969 139.191 li
389.743 142.165 li
391.518 142.895 li
393.292 143.333 li
395.066 142.359 li
396.84 140.476 li
398.614 138.548 li
400.388 135.999 li
402.162 134.764 li
403.936 133.486 li
405.71 133.73 li
407.484 133.503 li
409.258 135.154 li
411.032 135.85 li
412.806 136.44 li
414.58 135.441 li
416.354 135.284 li
418.128 135.095 li
419.902 133.942 li
421.676 135.252 li
423.45 135.979 li
425.224 135.288 li
426.998 136.888 li
428.772 136.124 li
430.546 137.83 li
432.32 136.545 li
434.094 138.099 li
435.868 135.434 li
437.643 135.244 li
439.417 132.753 li
441.191 135.003 li
442.965 133.075 li
444.739 134.05 li
446.513 133.685 li
448.287 134.298 li
450.061 134.611 li
451.835 135.531 li
453.609 136.99 li
455.383 137.361 li
457.157 140.836 li
458.931 140.816 li
460.705 138.575 li
462.479 136.679 li
464.253 137.5 li
466.027 138.935 li
467.801 140.87 li
469.575 139.17 li
471.349 135.399 li
473.123 134.769 li
474.897 132.741 li
476.671 133.486 li
478.445 132.215 li
480.219 133.845 li
481.993 134.994 li
483.768 135.232 li
485.542 134.271 li
487.316 136.053 li
489.09 136.604 li
490.864 136.195 li
492.638 136.784 li
494.412 137.378 li
496.186 136.892 li
497.96 137.714 li
499.734 138.143 li
501.508 137.573 li
503.282 138.435 li
505.056 137.501 li
506.83 135.42 li
508.604 136.521 li
510.378 135.389 li
512.152 135.597 li
513.926 134.096 li
515.7 134.783 li
517.474 133.147 li
519.248 134.321 li
521.022 135.181 li
522.796 134.989 li
524.57 137.158 li
526.344 137.403 li
528.118 138.089 li
529.893 137.344 li
531.667 137.44 li
533.441 137.006 li
535.215 136.615 li
536.989 136.321 li
538.763 135.87 li
@
102.263 131.241 mo
102.263 105.741 li
207.263 105.741 li
207.263 131.241 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
1 /0 /CSD get_res sepcs
1 sep
MPSWGR+Helvetica*1 [8.00025 0 0 -8.00025 0 0 ]msf
137.513 116.138 mo
(clean dataset)
[4.00012 1.77592 4.44814 4.44815 4.44814 2.22406 4.44814 4.44814 2.22408 4.44814 4.00012 4.44814 
0 ]xsh
1 lj
10 ml
[] 0 dsh
105.263 112.763 mo
135.263 112.763 li
@
%%IncludeResource: font Helvetica
/MPSWGR+Helvetica*1 
[32{/.notdef}rp /space 12{/.notdef}rp /hyphen 2{/.notdef}rp /zero /one /two 
/three /four /five 16{/.notdef}rp /F 7{/.notdef}rp /N 9{/.notdef}rp 
/X 8{/.notdef}rp /a /.notdef /c /d /e /f 
2{/.notdef}rp /i 2{/.notdef}rp /l /.notdef /n /o /p 
/.notdef /r /s /t 4{/.notdef}rp /y 134{/.notdef}rp]
MPSWGR+Helvetica nf
MPSWGR+Helvetica*1 [8.00025 0 0 -8.00025 0 0 ]msf
137.513 127.594 mo
(FX prediction filter)
[4.88809 5.33609 2.22408 4.44814 2.66403 4.44814 4.44814 1.77592 4.00014 2.22406 1.77594 4.44814 
4.44814 2.22408 2.22406 1.77594 1.77592 2.22408 4.44814 0 ]xsh
2 lj
1 ml
[6 2.25 1.5 2.25 ] 0 dsh
105.263 124.219 mo
135.263 124.219 li
@
.5 lw
0 lj
10 ml
[] 0 dsh
102.263 131.241 mo
102.263 105.741 li
207.263 105.741 li
207.263 131.241 li
cp
1 /0 /CSD get_res sepcs
.851 sep
@
77.5128 257.991 mo
538.763 257.991 li
538.763 204.741 li
77.5128 204.741 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
2 lc
1 lj
77.5128 257.991 mo
538.763 257.991 li
1 /0 /CSD get_res sepcs
.851 sep
@
77.5128 204.741 mo
538.763 204.741 li
@
77.5128 257.991 mo
77.5128 253.379 li
@
121.864 257.991 mo
121.864 253.379 li
@
166.215 257.991 mo
166.215 253.379 li
@
210.566 257.991 mo
210.566 253.379 li
@
254.917 257.991 mo
254.917 253.379 li
@
299.268 257.991 mo
299.268 253.379 li
@
343.618 257.991 mo
343.618 253.379 li
@
387.969 257.991 mo
387.969 253.379 li
@
432.32 257.991 mo
432.32 253.379 li
@
476.671 257.991 mo
476.671 253.379 li
@
521.022 257.991 mo
521.022 253.379 li
@
77.5128 204.741 mo
77.5128 209.354 li
@
121.864 204.741 mo
121.864 209.354 li
@
166.215 204.741 mo
166.215 209.354 li
@
210.566 204.741 mo
210.566 209.354 li
@
254.917 204.741 mo
254.917 209.354 li
@
299.268 204.741 mo
299.268 209.354 li
@
343.618 204.741 mo
343.618 209.354 li
@
387.969 204.741 mo
387.969 209.354 li
@
432.32 204.741 mo
432.32 209.354 li
@
476.671 204.741 mo
476.671 209.354 li
@
521.022 204.741 mo
521.022 209.354 li
@
MPSWGR+Helvetica*1 [12 0 0 -12 0 0 ]msf
74.1378 275.141 mo
(0)sh
115.114 275.141 mo
(50)
[6.672 0 ]xsh
156.09 275.141 mo
(100)
[6.672 6.672 0 ]xsh
200.441 275.141 mo
(150)
[6.672 6.672 0 ]xsh
244.792 275.141 mo
(200)
[6.672 6.67198 0 ]xsh
289.143 275.141 mo
(250)
[6.672 6.672 0 ]xsh
333.494 275.141 mo
(300)
[6.672 6.672 0 ]xsh
377.845 275.141 mo
(350)
[6.672 6.672 0 ]xsh
422.195 275.141 mo
(400)
[6.672 6.672 0 ]xsh
466.546 275.141 mo
(450)
[6.672 6.672 0 ]xsh
510.897 275.141 mo
(500)
[6.672 6.672 0 ]xsh
MPSWGS+Helvetica-Bold*1 [12 0 0 -12 0 0 ]msf
292.013 291.891 mo
(Trace)
[7.33191 4.66791 6.672 6.672 0 ]xsh
77.5128 257.991 mo
77.5128 204.741 li
@
538.763 257.991 mo
538.763 204.741 li
@
77.5128 257.991 mo
82.1253 257.991 li
@
77.5128 236.691 mo
82.1253 236.691 li
@
77.5128 215.391 mo
82.1253 215.391 li
@
538.763 257.991 mo
534.15 257.991 li
@
538.763 236.691 mo
534.15 236.691 li
@
538.763 215.391 mo
534.15 215.391 li
@
MPSWGR+Helvetica*1 [12 0 0 -12 0 0 ]msf
55.1128 262.866 mo
(-10)
[3.99591 6.672 0 ]xsh
66.3628 241.566 mo
(0)sh
59.6128 220.266 mo
(10)
[6.672 0 ]xsh
MPSWGS+Helvetica-Bold*1 [-5.2e-7 -12 -12 5.2e-7 0 0 ]msf
49.1128 260.991 mo
(Amplitude)
[-8.66382 -10.6679 -7.33191 -3.336 -3.336 -3.99591 -7.33191 -7.33191 0 ]ysh
1 lw
0 lc
77.5128 238.51 mo
79.2868 238.203 li
81.0608 237.185 li
82.8349 235.75 li
84.6089 235.085 li
86.383 235.94 li
88.157 237.446 li
89.931 238.169 li
91.7051 238.151 li
93.4791 238.438 li
95.2532 238.899 li
97.0272 238.227 li
98.8012 236.61 li
100.575 235.516 li
102.349 234.637 li
104.123 233.173 li
105.897 232.783 li
107.671 234.593 li
109.445 237.186 li
111.219 238.478 li
112.994 237.844 li
114.768 236.478 li
116.542 236.132 li
118.316 237.242 li
120.09 238.964 li
121.864 240.284 li
123.638 240.306 li
125.412 238.665 li
127.186 236.118 li
128.96 233.854 li
130.734 232.944 li
132.508 233.422 li
134.282 234.689 li
136.056 236.017 li
137.83 236.927 li
139.604 237.158 li
141.378 236.979 li
143.152 236.93 li
144.926 237.111 li
146.7 237.117 li
148.474 236.701 li
150.248 236.119 li
152.022 235.787 li
153.796 235.811 li
155.57 236.021 li
157.344 236.079 li
159.119 236.227 li
160.893 237.257 li
162.667 239.055 li
164.441 240.415 li
166.215 240.698 li
167.989 240.173 li
169.763 239.346 li
171.537 238.525 li
173.311 237.839 li
175.085 237.183 li
176.859 236.357 li
178.633 235.289 li
180.407 234.325 li
182.181 233.854 li
183.955 233.84 li
185.729 234.008 li
187.503 233.995 li
189.277 233.503 li
191.051 232.834 li
192.825 232.809 li
194.599 233.957 li
196.373 235.536 li
198.147 236.589 li
199.921 236.963 li
201.695 237.12 li
203.47 237.196 li
205.244 236.908 li
207.018 236.322 li
208.792 235.946 li
210.566 236.271 li
212.34 237.2 li
214.114 238.102 li
215.888 238.52 li
217.662 238.29 li
219.436 237.568 li
221.21 236.729 li
222.984 236.071 li
224.758 235.604 li
226.532 235.314 li
228.306 235.153 li
230.08 234.984 li
231.854 234.721 li
233.628 234.372 li
235.402 233.864 li
237.176 233.273 li
238.95 232.748 li
240.724 232.555 li
242.498 232.807 li
244.272 233.442 li
246.046 234.32 li
247.82 235.71 li
249.595 237.859 li
251.369 240.249 li
253.143 241.994 li
254.917 242.283 li
256.691 241.192 li
258.465 239.27 li
260.239 237.294 li
262.013 235.818 li
263.787 234.904 li
265.561 234.405 li
267.335 234.183 li
269.109 234.214 li
270.883 234.569 li
272.657 235.048 li
274.431 235.378 li
276.205 235.439 li
277.979 235.394 li
279.753 235.473 li
281.527 235.636 li
283.301 235.657 li
285.075 235.554 li
286.849 235.551 li
288.623 235.643 li
290.397 235.739 li
292.171 235.896 li
293.945 236.157 li
295.719 236.363 li
297.493 236.341 li
299.268 236.24 li
301.042 236.293 li
302.816 236.443 li
304.59 236.599 li
306.364 236.908 li
308.138 237.289 li
309.912 237.31 li
311.686 236.937 li
313.46 236.489 li
315.234 236.138 li
317.008 236.016 li
318.782 236.115 li
320.556 236.188 li
322.33 236.165 li
324.104 236.153 li
325.878 236.236 li
327.652 236.362 li
329.426 236.551 li
331.2 236.783 li
332.974 237 li
334.748 237.104 li
336.522 237.064 li
338.296 236.843 li
340.07 236.502 li
341.844 236.251 li
343.618 236.202 li
345.393 236.221 li
347.167 236.191 li
348.941 236.121 li
350.715 236.148 li
352.489 236.352 li
354.263 236.551 li
356.037 236.687 li
357.811 237.01 li
359.585 237.6 li
361.359 238.197 li
363.133 238.627 li
364.907 238.938 li
366.681 239.084 li
368.455 238.807 li
370.229 237.877 li
372.003 236.269 li
373.777 234.135 li
375.551 231.756 li
377.325 229.547 li
379.099 228.221 li
380.873 228.683 li
382.647 231.032 li
384.421 234.319 li
386.195 238.175 li
387.969 242.404 li
389.743 246.129 li
391.518 248.201 li
393.292 247.811 li
395.066 245.373 li
396.84 242.199 li
398.614 238.95 li
400.388 236.101 li
402.162 234.147 li
403.936 233.316 li
405.71 233.439 li
407.484 234.072 li
409.258 234.874 li
411.032 235.632 li
412.806 236.181 li
414.58 236.211 li
416.354 235.48 li
418.128 234.529 li
419.902 234.396 li
421.676 234.969 li
423.45 235.62 li
425.224 236.344 li
426.998 237.112 li
428.772 237.746 li
430.546 237.981 li
432.32 237.743 li
434.094 237.015 li
435.868 235.93 li
437.643 234.865 li
439.417 233.959 li
441.191 233.306 li
442.965 233.029 li
444.739 233.08 li
446.513 233.282 li
448.287 233.903 li
450.061 235.155 li
451.835 237.147 li
453.609 239.378 li
455.383 240.962 li
457.157 241.554 li
458.931 241.71 li
460.705 241.841 li
462.479 241.961 li
464.253 242.282 li
466.027 242.697 li
467.801 242.486 li
469.575 241.389 li
471.349 238.941 li
473.123 235.9 li
474.897 233.371 li
476.671 231.7 li
478.445 231.075 li
480.219 231.359 li
481.993 232.196 li
483.768 232.561 li
485.542 232.993 li
487.316 233.938 li
489.09 235.603 li
490.864 237.422 li
492.638 238.746 li
494.412 239.39 li
496.186 239.798 li
497.96 240.085 li
499.734 240.333 li
501.508 240.277 li
503.282 239.853 li
505.056 239.048 li
506.83 238.529 li
508.604 237.927 li
510.378 237.115 li
512.152 236.442 li
513.926 235.689 li
515.7 234.563 li
517.474 233.364 li
519.248 232.946 li
521.022 233.826 li
522.796 235.413 li
524.57 237.022 li
526.344 238.274 li
528.118 238.957 li
529.893 239.02 li
531.667 238.573 li
533.441 237.887 li
535.215 237.201 li
536.989 236.659 li
538.763 236.412 li
1 /0 /CSD get_res sepcs
1 sep
@
2 lj
1 ml
[6 2.25 1.5 2.25 ] 0 dsh
77.5128 238.472 mo
79.2868 237.694 li
81.0608 236.671 li
82.8349 235.945 li
84.6089 235.613 li
86.383 236.172 li
88.157 236.605 li
89.931 237.168 li
91.7051 237.692 li
93.4791 237.85 li
95.2532 237.783 li
97.0272 237.637 li
98.8012 236.684 li
100.575 235.584 li
102.349 234.658 li
104.123 234.144 li
105.897 234.409 li
107.671 235.464 li
109.445 237.18 li
111.219 237.473 li
112.994 237.181 li
114.768 236.655 li
116.542 236.144 li
118.316 237.24 li
120.09 237.997 li
121.864 238.488 li
123.638 238.534 li
125.412 237.803 li
127.186 237.018 li
128.96 235.632 li
130.734 234.155 li
132.508 234.155 li
134.282 234.725 li
136.056 235.713 li
137.83 236.942 li
139.604 237.148 li
141.378 236.493 li
143.152 237.058 li
144.926 236.81 li
146.7 236.622 li
148.474 236.391 li
150.248 235.905 li
152.022 235.251 li
153.796 235.987 li
155.57 235.874 li
157.344 236.659 li
159.119 237.476 li
160.893 238.243 li
162.667 239.065 li
164.441 240.039 li
166.215 239.066 li
167.989 238.695 li
169.763 238.373 li
171.537 238.033 li
173.311 236.544 li
175.085 237.531 li
176.859 236.154 li
178.633 234.346 li
180.407 234.395 li
182.181 234.558 li
183.955 235.074 li
185.729 235.437 li
187.503 235.16 li
189.277 234.402 li
191.051 234.248 li
192.825 234.181 li
194.599 234.727 li
196.373 235.836 li
198.147 236.238 li
199.921 236.294 li
201.695 236.192 li
203.47 237.171 li
205.244 236.873 li
207.018 236.856 li
208.792 236.482 li
210.566 236.491 li
212.34 236.871 li
214.114 237.688 li
215.888 237.977 li
217.662 238.416 li
219.436 237.767 li
221.21 237.392 li
222.984 236.948 li
224.758 236.566 li
226.532 236.446 li
228.306 236.549 li
230.08 236.606 li
231.854 236.463 li
233.628 235.878 li
235.402 235.525 li
237.176 234.788 li
238.95 234.546 li
240.724 234.301 li
242.498 234.488 li
244.272 234.799 li
246.046 234.919 li
247.82 235.099 li
249.595 236.31 li
251.369 238.031 li
253.143 239.776 li
254.917 240.541 li
256.691 240.441 li
258.465 239.697 li
260.239 238.61 li
262.013 237.769 li
263.787 237.071 li
265.561 236.632 li
267.335 236.112 li
269.109 235.427 li
270.883 234.667 li
272.657 234.467 li
274.431 234.858 li
276.205 235.339 li
277.979 235.624 li
279.753 235.883 li
281.527 236.039 li
283.301 236.011 li
285.075 235.788 li
286.849 235.698 li
288.623 235.709 li
290.397 235.686 li
292.171 235.767 li
293.945 235.691 li
295.719 235.783 li
297.493 235.955 li
299.268 236.198 li
301.042 236.239 li
302.816 236.216 li
304.59 236.265 li
306.364 236.535 li
308.138 237.067 li
309.912 237.658 li
311.686 237.804 li
313.46 237.518 li
315.234 236.909 li
317.008 236.091 li
318.782 235.886 li
320.556 235.765 li
322.33 235.975 li
324.104 235.946 li
325.878 235.963 li
327.652 235.968 li
329.426 236.341 li
331.2 236.716 li
332.974 236.945 li
334.748 237.077 li
336.522 236.515 li
338.296 236.729 li
340.07 235.897 li
341.844 235.859 li
343.618 236.223 li
345.393 236.367 li
347.167 236.894 li
348.941 237.027 li
350.715 236.31 li
352.489 236.247 li
354.263 236.173 li
356.037 236.812 li
357.811 238.165 li
359.585 239.197 li
361.359 239.323 li
363.133 239.533 li
364.907 238.997 li
366.681 237.462 li
368.455 238.171 li
370.229 236.071 li
372.003 235.443 li
373.777 234.121 li
375.551 232.529 li
377.325 231.217 li
379.099 230.624 li
380.873 231.157 li
382.647 232.98 li
384.421 235.41 li
386.195 237.907 li
387.969 240.226 li
389.743 241.954 li
391.518 243.113 li
393.292 243.284 li
395.066 242.418 li
396.84 240.631 li
398.614 238.607 li
400.388 236.947 li
402.162 235.59 li
403.936 234.636 li
405.71 234.018 li
407.484 234.093 li
409.258 234.591 li
411.032 235.468 li
412.806 236.336 li
414.58 236.377 li
416.354 236.178 li
418.128 235.692 li
419.902 235.596 li
421.676 235.778 li
423.45 236.116 li
425.224 236.594 li
426.998 236.936 li
428.772 237.583 li
430.546 238.325 li
432.32 238.383 li
434.094 237.748 li
435.868 236.961 li
437.643 235.847 li
439.417 234.83 li
441.191 234.196 li
442.965 234.785 li
444.739 234.856 li
446.513 235.206 li
448.287 235.887 li
450.061 236.244 li
451.835 236.544 li
453.609 236.736 li
455.383 237.723 li
457.157 238.06 li
458.931 238.216 li
460.705 238.501 li
462.479 237.305 li
464.253 236.259 li
466.027 237.884 li
467.801 238.986 li
469.575 238.181 li
471.349 237.694 li
473.123 235.928 li
474.897 235.176 li
476.671 234.031 li
478.445 233.582 li
480.219 233.15 li
481.993 233.593 li
483.768 234.299 li
485.542 234.861 li
487.316 235.679 li
489.09 236.416 li
490.864 236.706 li
492.638 237.209 li
494.412 237.964 li
496.186 238.88 li
497.96 239.637 li
499.734 239.779 li
501.508 239.296 li
503.282 238.39 li
505.056 237.505 li
506.83 237.121 li
508.604 236.514 li
510.378 236.325 li
512.152 236.155 li
513.926 235.763 li
515.7 235.526 li
517.474 235.349 li
519.248 235.42 li
521.022 235.547 li
522.796 236.02 li
524.57 236.61 li
526.344 237.138 li
528.118 237.617 li
529.893 237.871 li
531.667 237.933 li
533.441 237.644 li
535.215 237.066 li
536.989 236.417 li
538.763 235.863 li
@
1 lj
10 ml
[] 0 dsh
77.5128 238.51 mo
79.2868 238.203 li
81.0608 237.185 li
82.8349 235.75 li
84.6089 235.085 li
86.383 235.94 li
88.157 237.446 li
89.931 238.169 li
91.7051 238.151 li
93.4791 238.438 li
95.2532 238.899 li
97.0272 238.227 li
98.8012 236.61 li
100.575 235.516 li
102.349 234.637 li
104.123 233.173 li
105.897 232.783 li
107.671 234.593 li
109.445 237.186 li
111.219 238.478 li
112.994 237.844 li
114.768 236.478 li
116.542 236.132 li
118.316 237.242 li
120.09 238.964 li
121.864 240.284 li
123.638 240.306 li
125.412 238.665 li
127.186 236.118 li
128.96 233.854 li
130.734 232.944 li
132.508 233.422 li
134.282 234.689 li
136.056 236.017 li
137.83 236.927 li
139.604 237.158 li
141.378 236.979 li
143.152 236.93 li
144.926 237.111 li
146.7 237.117 li
148.474 236.701 li
150.248 236.119 li
152.022 235.787 li
153.796 235.811 li
155.57 236.021 li
157.344 236.079 li
159.119 236.227 li
160.893 237.257 li
162.667 239.055 li
164.441 240.415 li
166.215 240.698 li
167.989 240.173 li
169.763 239.346 li
171.537 238.525 li
173.311 237.839 li
175.085 237.183 li
176.859 236.357 li
178.633 235.289 li
180.407 234.325 li
182.181 233.854 li
183.955 233.84 li
185.729 234.008 li
187.503 233.995 li
189.277 233.503 li
191.051 232.834 li
192.825 232.809 li
194.599 233.957 li
196.373 235.536 li
198.147 236.589 li
199.921 236.963 li
201.695 237.12 li
203.47 237.196 li
205.244 236.908 li
207.018 236.322 li
208.792 235.946 li
210.566 236.271 li
212.34 237.2 li
214.114 238.102 li
215.888 238.52 li
217.662 238.29 li
219.436 237.568 li
221.21 236.729 li
222.984 236.071 li
224.758 235.604 li
226.532 235.314 li
228.306 235.153 li
230.08 234.984 li
231.854 234.721 li
233.628 234.372 li
235.402 233.864 li
237.176 233.273 li
238.95 232.748 li
240.724 232.555 li
242.498 232.807 li
244.272 233.442 li
246.046 234.32 li
247.82 235.71 li
249.595 237.859 li
251.369 240.249 li
253.143 241.994 li
254.917 242.283 li
256.691 241.192 li
258.465 239.27 li
260.239 237.294 li
262.013 235.818 li
263.787 234.904 li
265.561 234.405 li
267.335 234.183 li
269.109 234.214 li
270.883 234.569 li
272.657 235.048 li
274.431 235.378 li
276.205 235.439 li
277.979 235.394 li
279.753 235.473 li
281.527 235.636 li
283.301 235.657 li
285.075 235.554 li
286.849 235.551 li
288.623 235.643 li
290.397 235.739 li
292.171 235.896 li
293.945 236.157 li
295.719 236.363 li
297.493 236.341 li
299.268 236.24 li
301.042 236.293 li
302.816 236.443 li
304.59 236.599 li
306.364 236.908 li
308.138 237.289 li
309.912 237.31 li
311.686 236.937 li
313.46 236.489 li
315.234 236.138 li
317.008 236.016 li
318.782 236.115 li
320.556 236.188 li
322.33 236.165 li
324.104 236.153 li
325.878 236.236 li
327.652 236.362 li
329.426 236.551 li
331.2 236.783 li
332.974 237 li
334.748 237.104 li
336.522 237.064 li
338.296 236.843 li
340.07 236.502 li
341.844 236.251 li
343.618 236.202 li
345.393 236.221 li
347.167 236.191 li
348.941 236.121 li
350.715 236.148 li
352.489 236.352 li
354.263 236.551 li
356.037 236.687 li
357.811 237.01 li
359.585 237.6 li
361.359 238.197 li
363.133 238.627 li
364.907 238.938 li
366.681 239.084 li
368.455 238.807 li
370.229 237.877 li
372.003 236.269 li
373.777 234.135 li
375.551 231.756 li
377.325 229.547 li
379.099 228.221 li
380.873 228.683 li
382.647 231.032 li
384.421 234.319 li
386.195 238.175 li
387.969 242.404 li
389.743 246.129 li
391.518 248.201 li
393.292 247.811 li
395.066 245.373 li
396.84 242.199 li
398.614 238.95 li
400.388 236.101 li
402.162 234.147 li
403.936 233.316 li
405.71 233.439 li
407.484 234.072 li
409.258 234.874 li
411.032 235.632 li
412.806 236.181 li
414.58 236.211 li
416.354 235.48 li
418.128 234.529 li
419.902 234.396 li
421.676 234.969 li
423.45 235.62 li
425.224 236.344 li
426.998 237.112 li
428.772 237.746 li
430.546 237.981 li
432.32 237.743 li
434.094 237.015 li
435.868 235.93 li
437.643 234.865 li
439.417 233.959 li
441.191 233.306 li
442.965 233.029 li
444.739 233.08 li
446.513 233.282 li
448.287 233.903 li
450.061 235.155 li
451.835 237.147 li
453.609 239.378 li
455.383 240.962 li
457.157 241.554 li
458.931 241.71 li
460.705 241.841 li
462.479 241.961 li
464.253 242.282 li
466.027 242.697 li
467.801 242.486 li
469.575 241.389 li
471.349 238.941 li
473.123 235.9 li
474.897 233.371 li
476.671 231.7 li
478.445 231.075 li
480.219 231.359 li
481.993 232.196 li
483.768 232.561 li
485.542 232.993 li
487.316 233.938 li
489.09 235.603 li
490.864 237.422 li
492.638 238.746 li
494.412 239.39 li
496.186 239.798 li
497.96 240.085 li
499.734 240.333 li
501.508 240.277 li
503.282 239.853 li
505.056 239.048 li
506.83 238.529 li
508.604 237.927 li
510.378 237.115 li
512.152 236.442 li
513.926 235.689 li
515.7 234.563 li
517.474 233.364 li
519.248 232.946 li
521.022 233.826 li
522.796 235.413 li
524.57 237.022 li
526.344 238.274 li
528.118 238.957 li
529.893 239.02 li
531.667 238.573 li
533.441 237.887 li
535.215 237.201 li
536.989 236.659 li
538.763 236.412 li
@
2 lj
1 ml
[6 2.25 1.5 2.25 ] 0 dsh
77.5128 238.472 mo
79.2868 237.694 li
81.0608 236.671 li
82.8349 235.945 li
84.6089 235.613 li
86.383 236.172 li
88.157 236.605 li
89.931 237.168 li
91.7051 237.692 li
93.4791 237.85 li
95.2532 237.783 li
97.0272 237.637 li
98.8012 236.684 li
100.575 235.584 li
102.349 234.658 li
104.123 234.144 li
105.897 234.409 li
107.671 235.464 li
109.445 237.18 li
111.219 237.473 li
112.994 237.181 li
114.768 236.655 li
116.542 236.144 li
118.316 237.24 li
120.09 237.997 li
121.864 238.488 li
123.638 238.534 li
125.412 237.803 li
127.186 237.018 li
128.96 235.632 li
130.734 234.155 li
132.508 234.155 li
134.282 234.725 li
136.056 235.713 li
137.83 236.942 li
139.604 237.148 li
141.378 236.493 li
143.152 237.058 li
144.926 236.81 li
146.7 236.622 li
148.474 236.391 li
150.248 235.905 li
152.022 235.251 li
153.796 235.987 li
155.57 235.874 li
157.344 236.659 li
159.119 237.476 li
160.893 238.243 li
162.667 239.065 li
164.441 240.039 li
166.215 239.066 li
167.989 238.695 li
169.763 238.373 li
171.537 238.033 li
173.311 236.544 li
175.085 237.531 li
176.859 236.154 li
178.633 234.346 li
180.407 234.395 li
182.181 234.558 li
183.955 235.074 li
185.729 235.437 li
187.503 235.16 li
189.277 234.402 li
191.051 234.248 li
192.825 234.181 li
194.599 234.727 li
196.373 235.836 li
198.147 236.238 li
199.921 236.294 li
201.695 236.192 li
203.47 237.171 li
205.244 236.873 li
207.018 236.856 li
208.792 236.482 li
210.566 236.491 li
212.34 236.871 li
214.114 237.688 li
215.888 237.977 li
217.662 238.416 li
219.436 237.767 li
221.21 237.392 li
222.984 236.948 li
224.758 236.566 li
226.532 236.446 li
228.306 236.549 li
230.08 236.606 li
231.854 236.463 li
233.628 235.878 li
235.402 235.525 li
237.176 234.788 li
238.95 234.546 li
240.724 234.301 li
242.498 234.488 li
244.272 234.799 li
246.046 234.919 li
247.82 235.099 li
249.595 236.31 li
251.369 238.031 li
253.143 239.776 li
254.917 240.541 li
256.691 240.441 li
258.465 239.697 li
260.239 238.61 li
262.013 237.769 li
263.787 237.071 li
265.561 236.632 li
267.335 236.112 li
269.109 235.427 li
270.883 234.667 li
272.657 234.467 li
274.431 234.858 li
276.205 235.339 li
277.979 235.624 li
279.753 235.883 li
281.527 236.039 li
283.301 236.011 li
285.075 235.788 li
286.849 235.698 li
288.623 235.709 li
290.397 235.686 li
292.171 235.767 li
293.945 235.691 li
295.719 235.783 li
297.493 235.955 li
299.268 236.198 li
301.042 236.239 li
302.816 236.216 li
304.59 236.265 li
306.364 236.535 li
308.138 237.067 li
309.912 237.658 li
311.686 237.804 li
313.46 237.518 li
315.234 236.909 li
317.008 236.091 li
318.782 235.886 li
320.556 235.765 li
322.33 235.975 li
324.104 235.946 li
325.878 235.963 li
327.652 235.968 li
329.426 236.341 li
331.2 236.716 li
332.974 236.945 li
334.748 237.077 li
336.522 236.515 li
338.296 236.729 li
340.07 235.897 li
341.844 235.859 li
343.618 236.223 li
345.393 236.367 li
347.167 236.894 li
348.941 237.027 li
350.715 236.31 li
352.489 236.247 li
354.263 236.173 li
356.037 236.812 li
357.811 238.165 li
359.585 239.197 li
361.359 239.323 li
363.133 239.533 li
364.907 238.997 li
366.681 237.462 li
368.455 238.171 li
370.229 236.071 li
372.003 235.443 li
373.777 234.121 li
375.551 232.529 li
377.325 231.217 li
379.099 230.624 li
380.873 231.157 li
382.647 232.98 li
384.421 235.41 li
386.195 237.907 li
387.969 240.226 li
389.743 241.954 li
391.518 243.113 li
393.292 243.284 li
395.066 242.418 li
396.84 240.631 li
398.614 238.607 li
400.388 236.947 li
402.162 235.59 li
403.936 234.636 li
405.71 234.018 li
407.484 234.093 li
409.258 234.591 li
411.032 235.468 li
412.806 236.336 li
414.58 236.377 li
416.354 236.178 li
418.128 235.692 li
419.902 235.596 li
421.676 235.778 li
423.45 236.116 li
425.224 236.594 li
426.998 236.936 li
428.772 237.583 li
430.546 238.325 li
432.32 238.383 li
434.094 237.748 li
435.868 236.961 li
437.643 235.847 li
439.417 234.83 li
441.191 234.196 li
442.965 234.785 li
444.739 234.856 li
446.513 235.206 li
448.287 235.887 li
450.061 236.244 li
451.835 236.544 li
453.609 236.736 li
455.383 237.723 li
457.157 238.06 li
458.931 238.216 li
460.705 238.501 li
462.479 237.305 li
464.253 236.259 li
466.027 237.884 li
467.801 238.986 li
469.575 238.181 li
471.349 237.694 li
473.123 235.928 li
474.897 235.176 li
476.671 234.031 li
478.445 233.582 li
480.219 233.15 li
481.993 233.593 li
483.768 234.299 li
485.542 234.861 li
487.316 235.679 li
489.09 236.416 li
490.864 236.706 li
492.638 237.209 li
494.412 237.964 li
496.186 238.88 li
497.96 239.637 li
499.734 239.779 li
501.508 239.296 li
503.282 238.39 li
505.056 237.505 li
506.83 237.121 li
508.604 236.514 li
510.378 236.325 li
512.152 236.155 li
513.926 235.763 li
515.7 235.526 li
517.474 235.349 li
519.248 235.42 li
521.022 235.547 li
522.796 236.02 li
524.57 236.61 li
526.344 237.138 li
528.118 237.617 li
529.893 237.871 li
531.667 237.933 li
533.441 237.644 li
535.215 237.066 li
536.989 236.417 li
538.763 235.863 li
@
206.513 230.991 mo
206.513 205.491 li
294.263 205.491 li
294.263 230.991 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
1 /0 /CSD get_res sepcs
1 sep
MPSWGR+Helvetica*1 [8.00025 0 0 -8.00025 0 0 ]msf
241.763 215.888 mo
(clean dataset)
[4.00012 1.77592 4.44814 4.44814 4.44815 2.22406 4.44812 4.44815 2.22406 4.44815 4.00012 4.44812 
0 ]xsh
1 lj
10 ml
[] 0 dsh
209.513 212.513 mo
239.513 212.513 li
@
%%IncludeResource: font Helvetica
/MPSWGR+Helvetica*1 
[32{/.notdef}rp /space 12{/.notdef}rp /hyphen 2{/.notdef}rp /zero /one /two 
/three /four /five 11{/.notdef}rp /A 4{/.notdef}rp /F 6{/.notdef}rp 
/M /N 4{/.notdef}rp /S 4{/.notdef}rp /X 8{/.notdef}rp /a 
/.notdef /c /d /e /f 2{/.notdef}rp /i 2{/.notdef}rp 
/l /.notdef /n /o /p /.notdef /r /s 
/t 4{/.notdef}rp /y 134{/.notdef}rp]
MPSWGR+Helvetica nf
MPSWGR+Helvetica*1 [8.00025 0 0 -8.00025 0 0 ]msf
241.763 227.344 mo
(MSSA)
[6.66414 5.33611 5.33611 0 ]xsh
2 lj
1 ml
[6 2.25 1.5 2.25 ] 0 dsh
209.513 223.969 mo
239.513 223.969 li
@
.5 lw
0 lj
10 ml
[] 0 dsh
206.513 230.991 mo
206.513 205.491 li
294.263 205.491 li
294.263 230.991 li
cp
1 /0 /CSD get_res sepcs
.851 sep
@
77.5128 357.741 mo
538.763 357.741 li
538.763 304.491 li
77.5128 304.491 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
2 lc
1 lj
77.5128 357.741 mo
538.763 357.741 li
1 /0 /CSD get_res sepcs
.851 sep
@
77.5128 304.491 mo
538.763 304.491 li
@
77.5128 357.741 mo
77.5128 353.129 li
@
121.864 357.741 mo
121.864 353.129 li
@
166.215 357.741 mo
166.215 353.129 li
@
210.566 357.741 mo
210.566 353.129 li
@
254.917 357.741 mo
254.917 353.129 li
@
299.268 357.741 mo
299.268 353.129 li
@
343.618 357.741 mo
343.618 353.129 li
@
387.969 357.741 mo
387.969 353.129 li
@
432.32 357.741 mo
432.32 353.129 li
@
476.671 357.741 mo
476.671 353.129 li
@
521.022 357.741 mo
521.022 353.129 li
@
77.5128 304.491 mo
77.5128 309.104 li
@
121.864 304.491 mo
121.864 309.104 li
@
166.215 304.491 mo
166.215 309.104 li
@
210.566 304.491 mo
210.566 309.104 li
@
254.917 304.491 mo
254.917 309.104 li
@
299.268 304.491 mo
299.268 309.104 li
@
343.618 304.491 mo
343.618 309.104 li
@
387.969 304.491 mo
387.969 309.104 li
@
432.32 304.491 mo
432.32 309.104 li
@
476.671 304.491 mo
476.671 309.104 li
@
521.022 304.491 mo
521.022 309.104 li
@
MPSWGR+Helvetica*1 [12 0 0 -12 0 0 ]msf
74.1378 374.891 mo
(0)sh
115.114 374.891 mo
(50)
[6.672 0 ]xsh
156.09 374.891 mo
(100)
[6.672 6.672 0 ]xsh
200.441 374.891 mo
(150)
[6.672 6.672 0 ]xsh
244.792 374.891 mo
(200)
[6.672 6.67198 0 ]xsh
289.143 374.891 mo
(250)
[6.672 6.672 0 ]xsh
333.494 374.891 mo
(300)
[6.672 6.672 0 ]xsh
377.845 374.891 mo
(350)
[6.672 6.672 0 ]xsh
422.195 374.891 mo
(400)
[6.672 6.672 0 ]xsh
466.546 374.891 mo
(450)
[6.672 6.672 0 ]xsh
510.897 374.891 mo
(500)
[6.672 6.672 0 ]xsh
MPSWGS+Helvetica-Bold*1 [12 0 0 -12 0 0 ]msf
292.013 391.641 mo
(Trace)
[7.33191 4.66791 6.672 6.672 0 ]xsh
77.5128 357.741 mo
77.5128 304.491 li
@
538.763 357.741 mo
538.763 304.491 li
@
77.5128 357.741 mo
82.1253 357.741 li
@
77.5128 336.441 mo
82.1253 336.441 li
@
77.5128 315.141 mo
82.1253 315.141 li
@
538.763 357.741 mo
534.15 357.741 li
@
538.763 336.441 mo
534.15 336.441 li
@
538.763 315.141 mo
534.15 315.141 li
@
MPSWGR+Helvetica*1 [12 0 0 -12 0 0 ]msf
55.1128 362.616 mo
(-10)
[3.99591 6.672 0 ]xsh
66.3628 341.316 mo
(0)sh
59.6128 320.016 mo
(10)
[6.672 0 ]xsh
MPSWGS+Helvetica-Bold*1 [-5.2e-7 -12 -12 5.2e-7 0 0 ]msf
49.1128 360.741 mo
(Amplitude)
[-8.66382 -10.6679 -7.33191 -3.336 -3.336 -3.99591 -7.33191 -7.33191 0 ]ysh
1 lw
0 lc
77.5128 338.26 mo
79.2868 337.953 li
81.0608 336.935 li
82.8349 335.5 li
84.6089 334.835 li
86.383 335.69 li
88.157 337.196 li
89.931 337.919 li
91.7051 337.901 li
93.4791 338.188 li
95.2532 338.649 li
97.0272 337.977 li
98.8012 336.36 li
100.575 335.266 li
102.349 334.387 li
104.123 332.923 li
105.897 332.533 li
107.671 334.343 li
109.445 336.936 li
111.219 338.228 li
112.994 337.594 li
114.768 336.228 li
116.542 335.882 li
118.316 336.992 li
120.09 338.714 li
121.864 340.034 li
123.638 340.056 li
125.412 338.415 li
127.186 335.868 li
128.96 333.604 li
130.734 332.694 li
132.508 333.172 li
134.282 334.439 li
136.056 335.767 li
137.83 336.677 li
139.604 336.908 li
141.378 336.729 li
143.152 336.68 li
144.926 336.861 li
146.7 336.867 li
148.474 336.451 li
150.248 335.869 li
152.022 335.537 li
153.796 335.561 li
155.57 335.771 li
157.344 335.829 li
159.119 335.977 li
160.893 337.007 li
162.667 338.805 li
164.441 340.165 li
166.215 340.448 li
167.989 339.923 li
169.763 339.096 li
171.537 338.275 li
173.311 337.589 li
175.085 336.933 li
176.859 336.107 li
178.633 335.039 li
180.407 334.075 li
182.181 333.604 li
183.955 333.59 li
185.729 333.758 li
187.503 333.745 li
189.277 333.253 li
191.051 332.584 li
192.825 332.559 li
194.599 333.707 li
196.373 335.286 li
198.147 336.339 li
199.921 336.713 li
201.695 336.87 li
203.47 336.946 li
205.244 336.658 li
207.018 336.072 li
208.792 335.696 li
210.566 336.021 li
212.34 336.95 li
214.114 337.852 li
215.888 338.27 li
217.662 338.04 li
219.436 337.318 li
221.21 336.479 li
222.984 335.821 li
224.758 335.354 li
226.532 335.064 li
228.306 334.903 li
230.08 334.734 li
231.854 334.471 li
233.628 334.122 li
235.402 333.614 li
237.176 333.023 li
238.95 332.498 li
240.724 332.305 li
242.498 332.557 li
244.272 333.192 li
246.046 334.07 li
247.82 335.46 li
249.595 337.609 li
251.369 339.999 li
253.143 341.744 li
254.917 342.033 li
256.691 340.942 li
258.465 339.02 li
260.239 337.044 li
262.013 335.568 li
263.787 334.654 li
265.561 334.155 li
267.335 333.933 li
269.109 333.964 li
270.883 334.319 li
272.657 334.798 li
274.431 335.128 li
276.205 335.189 li
277.979 335.144 li
279.753 335.223 li
281.527 335.386 li
283.301 335.407 li
285.075 335.304 li
286.849 335.301 li
288.623 335.393 li
290.397 335.489 li
292.171 335.646 li
293.945 335.907 li
295.719 336.113 li
297.493 336.091 li
299.268 335.99 li
301.042 336.043 li
302.816 336.193 li
304.59 336.349 li
306.364 336.658 li
308.138 337.039 li
309.912 337.06 li
311.686 336.687 li
313.46 336.239 li
315.234 335.888 li
317.008 335.766 li
318.782 335.865 li
320.556 335.938 li
322.33 335.915 li
324.104 335.903 li
325.878 335.986 li
327.652 336.112 li
329.426 336.301 li
331.2 336.533 li
332.974 336.75 li
334.748 336.854 li
336.522 336.814 li
338.296 336.593 li
340.07 336.252 li
341.844 336.001 li
343.618 335.952 li
345.393 335.971 li
347.167 335.941 li
348.941 335.871 li
350.715 335.898 li
352.489 336.102 li
354.263 336.301 li
356.037 336.437 li
357.811 336.76 li
359.585 337.35 li
361.359 337.947 li
363.133 338.377 li
364.907 338.688 li
366.681 338.834 li
368.455 338.557 li
370.229 337.627 li
372.003 336.019 li
373.777 333.885 li
375.551 331.506 li
377.325 329.297 li
379.099 327.971 li
380.873 328.433 li
382.647 330.782 li
384.421 334.069 li
386.195 337.925 li
387.969 342.154 li
389.743 345.879 li
391.518 347.95 li
393.292 347.561 li
395.066 345.123 li
396.84 341.949 li
398.614 338.7 li
400.388 335.851 li
402.162 333.897 li
403.936 333.066 li
405.71 333.189 li
407.484 333.822 li
409.258 334.624 li
411.032 335.382 li
412.806 335.931 li
414.58 335.961 li
416.354 335.23 li
418.128 334.279 li
419.902 334.146 li
421.676 334.719 li
423.45 335.37 li
425.224 336.094 li
426.998 336.862 li
428.772 337.496 li
430.546 337.731 li
432.32 337.493 li
434.094 336.765 li
435.868 335.68 li
437.643 334.615 li
439.417 333.709 li
441.191 333.056 li
442.965 332.779 li
444.739 332.83 li
446.513 333.032 li
448.287 333.653 li
450.061 334.905 li
451.835 336.897 li
453.609 339.128 li
455.383 340.712 li
457.157 341.304 li
458.931 341.46 li
460.705 341.591 li
462.479 341.711 li
464.253 342.032 li
466.027 342.447 li
467.801 342.236 li
469.575 341.139 li
471.349 338.691 li
473.123 335.65 li
474.897 333.121 li
476.671 331.45 li
478.445 330.825 li
480.219 331.109 li
481.993 331.946 li
483.768 332.311 li
485.542 332.743 li
487.316 333.688 li
489.09 335.353 li
490.864 337.172 li
492.638 338.496 li
494.412 339.14 li
496.186 339.548 li
497.96 339.835 li
499.734 340.083 li
501.508 340.027 li
503.282 339.603 li
505.056 338.798 li
506.83 338.279 li
508.604 337.677 li
510.378 336.865 li
512.152 336.192 li
513.926 335.439 li
515.7 334.313 li
517.474 333.114 li
519.248 332.696 li
521.022 333.576 li
522.796 335.163 li
524.57 336.772 li
526.344 338.024 li
528.118 338.707 li
529.893 338.77 li
531.667 338.323 li
533.441 337.637 li
535.215 336.951 li
536.989 336.409 li
538.763 336.162 li
1 /0 /CSD get_res sepcs
1 sep
@
2 lj
1 ml
[6 2.25 1.5 2.25 ] 0 dsh
77.5128 337.371 mo
79.2868 337.216 li
81.0608 336.264 li
82.8349 334.985 li
84.6089 334.373 li
86.383 335.165 li
88.157 336.757 li
89.931 337.717 li
91.7051 337.665 li
93.4791 337.606 li
95.2532 337.957 li
97.0272 337.542 li
98.8012 335.632 li
100.575 333.656 li
102.349 333.192 li
104.123 321.622 li
105.897 333.341 li
107.671 333.64 li
109.445 335.687 li
111.219 337.701 li
112.994 336.983 li
114.768 334.531 li
116.542 333.911 li
118.316 336.145 li
120.09 338.896 li
121.864 340.007 li
123.638 339.229 li
125.412 337.279 li
127.186 335.241 li
128.96 334.131 li
130.734 333.926 li
132.508 333.945 li
134.282 334.326 li
136.056 335.626 li
137.83 337.185 li
139.604 337.611 li
141.378 329.166 li
143.152 335.88 li
144.926 335.552 li
146.7 335.412 li
148.474 335.143 li
150.248 334.959 li
152.022 334.921 li
153.796 341.856 li
155.57 334.78 li
157.344 335.447 li
159.119 336.758 li
160.893 338.005 li
162.667 338.824 li
164.441 339.271 li
166.215 339.127 li
167.989 338.418 li
169.763 338.157 li
171.537 338.947 li
173.311 339.379 li
175.085 337.725 li
176.859 334.763 li
178.633 333.008 li
180.407 333.367 li
182.181 334.329 li
183.955 334.528 li
185.729 334.436 li
187.503 334.852 li
189.277 335.08 li
191.051 334.115 li
192.825 332.897 li
194.599 333.265 li
196.373 334.943 li
198.147 336.067 li
199.921 336.46 li
201.695 325.115 li
203.47 337.656 li
205.244 336.009 li
207.018 333.937 li
208.792 334.785 li
210.566 347.426 li
212.34 339.287 li
214.114 337.707 li
215.888 336.311 li
217.662 336.991 li
219.436 337.869 li
221.21 337.07 li
222.984 335.512 li
224.758 334.825 li
226.532 335.026 li
228.306 335.352 li
230.08 335.623 li
231.854 335.737 li
233.628 335.093 li
235.402 333.636 li
237.176 332.546 li
238.95 332.665 li
240.724 333.035 li
242.498 332.452 li
244.272 331.73 li
246.046 332.66 li
247.82 323.147 li
249.595 338.011 li
251.369 340.044 li
253.143 341.578 li
254.917 342.215 li
256.691 341.208 li
258.465 339.112 li
260.239 337.366 li
262.013 336.375 li
263.787 335.54 li
265.561 334.773 li
267.335 334.472 li
269.109 334.483 li
270.883 334.471 li
272.657 334.747 li
274.431 335.464 li
276.205 335.747 li
277.979 334.979 li
279.753 334.148 li
281.527 334.55 li
283.301 335.751 li
285.075 336.226 li
286.849 335.583 li
288.623 334.879 li
290.397 334.93 li
292.171 335.445 li
293.945 335.831 li
295.719 335.924 li
297.493 335.814 li
299.268 335.618 li
301.042 335.526 li
302.816 335.619 li
304.59 335.763 li
306.364 335.981 li
308.138 336.551 li
309.912 337.401 li
311.686 337.9 li
313.46 337.644 li
315.234 336.946 li
317.008 336.247 li
318.782 335.548 li
320.556 334.809 li
322.33 334.465 li
324.104 335.026 li
325.878 336.244 li
327.652 337.11 li
329.426 336.917 li
331.2 336.11 li
332.974 335.651 li
334.748 335.686 li
336.522 335.58 li
338.296 335.348 li
340.07 335.833 li
341.844 336.894 li
343.618 323.057 li
345.393 335.778 li
347.167 335.288 li
348.941 336.624 li
350.715 337.653 li
352.489 336.542 li
354.263 335.258 li
356.037 336.272 li
357.811 338.075 li
359.585 337.906 li
361.359 344.603 li
363.133 338.062 li
364.907 340.53 li
366.681 340.52 li
368.455 337.439 li
370.229 334.697 li
372.003 343.518 li
373.777 333.75 li
375.551 331.46 li
377.325 328.642 li
379.099 327.777 li
380.873 329.349 li
382.647 332.244 li
384.421 335.542 li
386.195 338.825 li
387.969 341.88 li
389.743 344.679 li
391.518 346.781 li
393.292 347.001 li
395.066 344.737 li
396.84 341.147 li
398.614 337.925 li
400.388 335.607 li
402.162 334.05 li
403.936 333.515 li
405.71 334.087 li
407.484 334.982 li
409.258 335.544 li
411.032 336.037 li
412.806 336.547 li
414.58 336.251 li
416.354 334.837 li
418.128 333.599 li
419.902 333.886 li
421.676 335.17 li
423.45 335.82 li
425.224 335.419 li
426.998 335.217 li
428.772 336.192 li
430.546 337.55 li
432.32 337.751 li
434.094 336.55 li
435.868 335.074 li
437.643 333.915 li
439.417 332.533 li
441.191 337.928 li
442.965 331.076 li
444.739 333.223 li
446.513 335.536 li
448.287 335.778 li
450.061 352.511 li
451.835 334.434 li
453.609 327.247 li
455.383 339.775 li
457.157 342.11 li
458.931 321.451 li
460.705 341.418 li
462.479 330.508 li
464.253 340.801 li
466.027 341.949 li
467.801 351.018 li
469.575 340.063 li
471.349 337.997 li
473.123 345.401 li
474.897 334.798 li
476.671 332.936 li
478.445 332.053 li
480.219 325.475 li
481.993 324.62 li
483.768 332.406 li
485.542 332.047 li
487.316 333.072 li
489.09 335.2 li
490.864 337.258 li
492.638 338.597 li
494.412 339.22 li
496.186 339.387 li
497.96 339.502 li
499.734 339.7 li
501.508 339.5 li
503.282 338.663 li
505.056 338.013 li
506.83 338.305 li
508.604 338.801 li
510.378 338.308 li
512.152 336.964 li
513.926 335.556 li
515.7 352.429 li
517.474 332.372 li
519.248 331.976 li
521.022 333.902 li
522.796 336.754 li
524.57 338.234 li
526.344 338.196 li
528.118 338.213 li
529.893 338.704 li
531.667 338.505 li
533.441 337.191 li
535.215 335.97 li
536.989 335.938 li
538.763 336.749 li
@
1 lj
10 ml
[] 0 dsh
77.5128 338.26 mo
79.2868 337.953 li
81.0608 336.935 li
82.8349 335.5 li
84.6089 334.835 li
86.383 335.69 li
88.157 337.196 li
89.931 337.919 li
91.7051 337.901 li
93.4791 338.188 li
95.2532 338.649 li
97.0272 337.977 li
98.8012 336.36 li
100.575 335.266 li
102.349 334.387 li
104.123 332.923 li
105.897 332.533 li
107.671 334.343 li
109.445 336.936 li
111.219 338.228 li
112.994 337.594 li
114.768 336.228 li
116.542 335.882 li
118.316 336.992 li
120.09 338.714 li
121.864 340.034 li
123.638 340.056 li
125.412 338.415 li
127.186 335.868 li
128.96 333.604 li
130.734 332.694 li
132.508 333.172 li
134.282 334.439 li
136.056 335.767 li
137.83 336.677 li
139.604 336.908 li
141.378 336.729 li
143.152 336.68 li
144.926 336.861 li
146.7 336.867 li
148.474 336.451 li
150.248 335.869 li
152.022 335.537 li
153.796 335.561 li
155.57 335.771 li
157.344 335.829 li
159.119 335.977 li
160.893 337.007 li
162.667 338.805 li
164.441 340.165 li
166.215 340.448 li
167.989 339.923 li
169.763 339.096 li
171.537 338.275 li
173.311 337.589 li
175.085 336.933 li
176.859 336.107 li
178.633 335.039 li
180.407 334.075 li
182.181 333.604 li
183.955 333.59 li
185.729 333.758 li
187.503 333.745 li
189.277 333.253 li
191.051 332.584 li
192.825 332.559 li
194.599 333.707 li
196.373 335.286 li
198.147 336.339 li
199.921 336.713 li
201.695 336.87 li
203.47 336.946 li
205.244 336.658 li
207.018 336.072 li
208.792 335.696 li
210.566 336.021 li
212.34 336.95 li
214.114 337.852 li
215.888 338.27 li
217.662 338.04 li
219.436 337.318 li
221.21 336.479 li
222.984 335.821 li
224.758 335.354 li
226.532 335.064 li
228.306 334.903 li
230.08 334.734 li
231.854 334.471 li
233.628 334.122 li
235.402 333.614 li
237.176 333.023 li
238.95 332.498 li
240.724 332.305 li
242.498 332.557 li
244.272 333.192 li
246.046 334.07 li
247.82 335.46 li
249.595 337.609 li
251.369 339.999 li
253.143 341.744 li
254.917 342.033 li
256.691 340.942 li
258.465 339.02 li
260.239 337.044 li
262.013 335.568 li
263.787 334.654 li
265.561 334.155 li
267.335 333.933 li
269.109 333.964 li
270.883 334.319 li
272.657 334.798 li
274.431 335.128 li
276.205 335.189 li
277.979 335.144 li
279.753 335.223 li
281.527 335.386 li
283.301 335.407 li
285.075 335.304 li
286.849 335.301 li
288.623 335.393 li
290.397 335.489 li
292.171 335.646 li
293.945 335.907 li
295.719 336.113 li
297.493 336.091 li
299.268 335.99 li
301.042 336.043 li
302.816 336.193 li
304.59 336.349 li
306.364 336.658 li
308.138 337.039 li
309.912 337.06 li
311.686 336.687 li
313.46 336.239 li
315.234 335.888 li
317.008 335.766 li
318.782 335.865 li
320.556 335.938 li
322.33 335.915 li
324.104 335.903 li
325.878 335.986 li
327.652 336.112 li
329.426 336.301 li
331.2 336.533 li
332.974 336.75 li
334.748 336.854 li
336.522 336.814 li
338.296 336.593 li
340.07 336.252 li
341.844 336.001 li
343.618 335.952 li
345.393 335.971 li
347.167 335.941 li
348.941 335.871 li
350.715 335.898 li
352.489 336.102 li
354.263 336.301 li
356.037 336.437 li
357.811 336.76 li
359.585 337.35 li
361.359 337.947 li
363.133 338.377 li
364.907 338.688 li
366.681 338.834 li
368.455 338.557 li
370.229 337.627 li
372.003 336.019 li
373.777 333.885 li
375.551 331.506 li
377.325 329.297 li
379.099 327.971 li
380.873 328.433 li
382.647 330.782 li
384.421 334.069 li
386.195 337.925 li
387.969 342.154 li
389.743 345.879 li
391.518 347.95 li
393.292 347.561 li
395.066 345.123 li
396.84 341.949 li
398.614 338.7 li
400.388 335.851 li
402.162 333.897 li
403.936 333.066 li
405.71 333.189 li
407.484 333.822 li
409.258 334.624 li
411.032 335.382 li
412.806 335.931 li
414.58 335.961 li
416.354 335.23 li
418.128 334.279 li
419.902 334.146 li
421.676 334.719 li
423.45 335.37 li
425.224 336.094 li
426.998 336.862 li
428.772 337.496 li
430.546 337.731 li
432.32 337.493 li
434.094 336.765 li
435.868 335.68 li
437.643 334.615 li
439.417 333.709 li
441.191 333.056 li
442.965 332.779 li
444.739 332.83 li
446.513 333.032 li
448.287 333.653 li
450.061 334.905 li
451.835 336.897 li
453.609 339.128 li
455.383 340.712 li
457.157 341.304 li
458.931 341.46 li
460.705 341.591 li
462.479 341.711 li
464.253 342.032 li
466.027 342.447 li
467.801 342.236 li
469.575 341.139 li
471.349 338.691 li
473.123 335.65 li
474.897 333.121 li
476.671 331.45 li
478.445 330.825 li
480.219 331.109 li
481.993 331.946 li
483.768 332.311 li
485.542 332.743 li
487.316 333.688 li
489.09 335.353 li
490.864 337.172 li
492.638 338.496 li
494.412 339.14 li
496.186 339.548 li
497.96 339.835 li
499.734 340.083 li
501.508 340.027 li
503.282 339.603 li
505.056 338.798 li
506.83 338.279 li
508.604 337.677 li
510.378 336.865 li
512.152 336.192 li
513.926 335.439 li
515.7 334.313 li
517.474 333.114 li
519.248 332.696 li
521.022 333.576 li
522.796 335.163 li
524.57 336.772 li
526.344 338.024 li
528.118 338.707 li
529.893 338.77 li
531.667 338.323 li
533.441 337.637 li
535.215 336.951 li
536.989 336.409 li
538.763 336.162 li
@
2 lj
1 ml
[6 2.25 1.5 2.25 ] 0 dsh
77.5128 337.371 mo
79.2868 337.216 li
81.0608 336.264 li
82.8349 334.985 li
84.6089 334.373 li
86.383 335.165 li
88.157 336.757 li
89.931 337.717 li
91.7051 337.665 li
93.4791 337.606 li
95.2532 337.957 li
97.0272 337.542 li
98.8012 335.632 li
100.575 333.656 li
102.349 333.192 li
104.123 321.622 li
105.897 333.341 li
107.671 333.64 li
109.445 335.687 li
111.219 337.701 li
112.994 336.983 li
114.768 334.531 li
116.542 333.911 li
118.316 336.145 li
120.09 338.896 li
121.864 340.007 li
123.638 339.229 li
125.412 337.279 li
127.186 335.241 li
128.96 334.131 li
130.734 333.926 li
132.508 333.945 li
134.282 334.326 li
136.056 335.626 li
137.83 337.185 li
139.604 337.611 li
141.378 329.166 li
143.152 335.88 li
144.926 335.552 li
146.7 335.412 li
148.474 335.143 li
150.248 334.959 li
152.022 334.921 li
153.796 341.856 li
155.57 334.78 li
157.344 335.447 li
159.119 336.758 li
160.893 338.005 li
162.667 338.824 li
164.441 339.271 li
166.215 339.127 li
167.989 338.418 li
169.763 338.157 li
171.537 338.947 li
173.311 339.379 li
175.085 337.725 li
176.859 334.763 li
178.633 333.008 li
180.407 333.367 li
182.181 334.329 li
183.955 334.528 li
185.729 334.436 li
187.503 334.852 li
189.277 335.08 li
191.051 334.115 li
192.825 332.897 li
194.599 333.265 li
196.373 334.943 li
198.147 336.067 li
199.921 336.46 li
201.695 325.115 li
203.47 337.656 li
205.244 336.009 li
207.018 333.937 li
208.792 334.785 li
210.566 347.426 li
212.34 339.287 li
214.114 337.707 li
215.888 336.311 li
217.662 336.991 li
219.436 337.869 li
221.21 337.07 li
222.984 335.512 li
224.758 334.825 li
226.532 335.026 li
228.306 335.352 li
230.08 335.623 li
231.854 335.737 li
233.628 335.093 li
235.402 333.636 li
237.176 332.546 li
238.95 332.665 li
240.724 333.035 li
242.498 332.452 li
244.272 331.73 li
246.046 332.66 li
247.82 323.147 li
249.595 338.011 li
251.369 340.044 li
253.143 341.578 li
254.917 342.215 li
256.691 341.208 li
258.465 339.112 li
260.239 337.366 li
262.013 336.375 li
263.787 335.54 li
265.561 334.773 li
267.335 334.472 li
269.109 334.483 li
270.883 334.471 li
272.657 334.747 li
274.431 335.464 li
276.205 335.747 li
277.979 334.979 li
279.753 334.148 li
281.527 334.55 li
283.301 335.751 li
285.075 336.226 li
286.849 335.583 li
288.623 334.879 li
290.397 334.93 li
292.171 335.445 li
293.945 335.831 li
295.719 335.924 li
297.493 335.814 li
299.268 335.618 li
301.042 335.526 li
302.816 335.619 li
304.59 335.763 li
306.364 335.981 li
308.138 336.551 li
309.912 337.401 li
311.686 337.9 li
313.46 337.644 li
315.234 336.946 li
317.008 336.247 li
318.782 335.548 li
320.556 334.809 li
322.33 334.465 li
324.104 335.026 li
325.878 336.244 li
327.652 337.11 li
329.426 336.917 li
331.2 336.11 li
332.974 335.651 li
334.748 335.686 li
336.522 335.58 li
338.296 335.348 li
340.07 335.833 li
341.844 336.894 li
343.618 323.057 li
345.393 335.778 li
347.167 335.288 li
348.941 336.624 li
350.715 337.653 li
352.489 336.542 li
354.263 335.258 li
356.037 336.272 li
357.811 338.075 li
359.585 337.906 li
361.359 344.603 li
363.133 338.062 li
364.907 340.53 li
366.681 340.52 li
368.455 337.439 li
370.229 334.697 li
372.003 343.518 li
373.777 333.75 li
375.551 331.46 li
377.325 328.642 li
379.099 327.777 li
380.873 329.349 li
382.647 332.244 li
384.421 335.542 li
386.195 338.825 li
387.969 341.88 li
389.743 344.679 li
391.518 346.781 li
393.292 347.001 li
395.066 344.737 li
396.84 341.147 li
398.614 337.925 li
400.388 335.607 li
402.162 334.05 li
403.936 333.515 li
405.71 334.087 li
407.484 334.982 li
409.258 335.544 li
411.032 336.037 li
412.806 336.547 li
414.58 336.251 li
416.354 334.837 li
418.128 333.599 li
419.902 333.886 li
421.676 335.17 li
423.45 335.82 li
425.224 335.419 li
426.998 335.217 li
428.772 336.192 li
430.546 337.55 li
432.32 337.751 li
434.094 336.55 li
435.868 335.074 li
437.643 333.915 li
439.417 332.533 li
441.191 337.928 li
442.965 331.076 li
444.739 333.223 li
446.513 335.536 li
448.287 335.778 li
450.061 352.511 li
451.835 334.434 li
453.609 327.247 li
455.383 339.775 li
457.157 342.11 li
458.931 321.451 li
460.705 341.418 li
462.479 330.508 li
464.253 340.801 li
466.027 341.949 li
467.801 351.018 li
469.575 340.063 li
471.349 337.997 li
473.123 345.401 li
474.897 334.798 li
476.671 332.936 li
478.445 332.053 li
480.219 325.475 li
481.993 324.62 li
483.768 332.406 li
485.542 332.047 li
487.316 333.072 li
489.09 335.2 li
490.864 337.258 li
492.638 338.597 li
494.412 339.22 li
496.186 339.387 li
497.96 339.502 li
499.734 339.7 li
501.508 339.5 li
503.282 338.663 li
505.056 338.013 li
506.83 338.305 li
508.604 338.801 li
510.378 338.308 li
512.152 336.964 li
513.926 335.556 li
515.7 352.429 li
517.474 332.372 li
519.248 331.976 li
521.022 333.902 li
522.796 336.754 li
524.57 338.234 li
526.344 338.196 li
528.118 338.213 li
529.893 338.704 li
531.667 338.505 li
533.441 337.191 li
535.215 335.97 li
536.989 335.938 li
538.763 336.749 li
@
78.2628 330.741 mo
78.2628 304.491 li
212.513 304.491 li
212.513 330.741 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
1 /0 /CSD get_res sepcs
1 sep
MPSWGR+Helvetica*1 [8.00025 0 0 -8.00025 0 0 ]msf
113.513 315.094 mo
(clean dataset)
[4.00012 1.77593 4.44814 4.44814 4.44814 2.22408 4.44814 4.44814 2.22406 4.44815 4.00012 4.44814 
0 ]xsh
1 lj
10 ml
[] 0 dsh
81.2628 311.719 mo
111.263 311.719 li
@
%%IncludeResource: font Helvetica
/MPSWGR+Helvetica*1 
[32{/.notdef}rp /space 12{/.notdef}rp /hyphen 2{/.notdef}rp /zero /one /two 
/three /four /five 11{/.notdef}rp /A /.notdef /C 2{/.notdef}rp 
/F 6{/.notdef}rp /M /N 4{/.notdef}rp /S 4{/.notdef}rp /X 
8{/.notdef}rp /a /.notdef /c /d /e /f /g 
/h /i 2{/.notdef}rp /l /.notdef /n /o /p 
/.notdef /r /s /t /.notdef /v 2{/.notdef}rp /y 
134{/.notdef}rp]
MPSWGR+Helvetica nf
MPSWGR+Helvetica*1 [8.00025 0 0 -8.00025 0 0 ]msf
113.513 326.888 mo
(Conventional thresholding)
[5.77605 4.44814 4.44814 4.00012 4.44814 4.44814 2.22408 1.77594 4.44814 4.44814 4.44814 1.77594 
2.22406 2.22408 4.44814 2.66402 4.44814 4.00012 4.44815 4.44814 1.77592 4.44814 1.77594 4.44814 
0 ]xsh
2 lj
1 ml
[6 2.25 1.5 2.25 ] 0 dsh
81.2628 323.513 mo
111.263 323.513 li
@
.5 lw
0 lj
10 ml
[] 0 dsh
78.2628 330.741 mo
78.2628 304.491 li
212.513 304.491 li
212.513 330.741 li
cp
1 /0 /CSD get_res sepcs
.851 sep
@
77.5128 458.241 mo
538.763 458.241 li
538.763 404.991 li
77.5128 404.991 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
2 lc
1 lj
77.5128 458.241 mo
538.763 458.241 li
1 /0 /CSD get_res sepcs
.851 sep
@
77.5128 404.991 mo
538.763 404.991 li
@
77.5128 458.241 mo
77.5128 453.629 li
@
121.864 458.241 mo
121.864 453.629 li
@
166.215 458.241 mo
166.215 453.629 li
@
210.566 458.241 mo
210.566 453.629 li
@
254.917 458.241 mo
254.917 453.629 li
@
299.268 458.241 mo
299.268 453.629 li
@
343.618 458.241 mo
343.618 453.629 li
@
387.969 458.241 mo
387.969 453.629 li
@
432.32 458.241 mo
432.32 453.629 li
@
476.671 458.241 mo
476.671 453.629 li
@
521.022 458.241 mo
521.022 453.629 li
@
77.5128 404.991 mo
77.5128 409.604 li
@
121.864 404.991 mo
121.864 409.604 li
@
166.215 404.991 mo
166.215 409.604 li
@
210.566 404.991 mo
210.566 409.604 li
@
254.917 404.991 mo
254.917 409.604 li
@
299.268 404.991 mo
299.268 409.604 li
@
343.618 404.991 mo
343.618 409.604 li
@
387.969 404.991 mo
387.969 409.604 li
@
432.32 404.991 mo
432.32 409.604 li
@
476.671 404.991 mo
476.671 409.604 li
@
521.022 404.991 mo
521.022 409.604 li
@
MPSWGR+Helvetica*1 [12 0 0 -12 0 0 ]msf
74.1378 475.391 mo
(0)sh
115.114 475.391 mo
(50)
[6.672 0 ]xsh
156.09 475.391 mo
(100)
[6.672 6.672 0 ]xsh
200.441 475.391 mo
(150)
[6.672 6.672 0 ]xsh
244.792 475.391 mo
(200)
[6.672 6.67198 0 ]xsh
289.143 475.391 mo
(250)
[6.672 6.672 0 ]xsh
333.494 475.391 mo
(300)
[6.672 6.672 0 ]xsh
377.845 475.391 mo
(350)
[6.672 6.672 0 ]xsh
422.195 475.391 mo
(400)
[6.672 6.672 0 ]xsh
466.546 475.391 mo
(450)
[6.672 6.672 0 ]xsh
510.897 475.391 mo
(500)
[6.672 6.672 0 ]xsh
MPSWGS+Helvetica-Bold*1 [12 0 0 -12 0 0 ]msf
292.013 492.141 mo
(Trace)
[7.33191 4.66791 6.672 6.672 0 ]xsh
77.5128 458.241 mo
77.5128 404.991 li
@
538.763 458.241 mo
538.763 404.991 li
@
77.5128 458.241 mo
82.1253 458.241 li
@
77.5128 436.941 mo
82.1253 436.941 li
@
77.5128 415.641 mo
82.1253 415.641 li
@
538.763 458.241 mo
534.15 458.241 li
@
538.763 436.941 mo
534.15 436.941 li
@
538.763 415.641 mo
534.15 415.641 li
@
MPSWGR+Helvetica*1 [12 0 0 -12 0 0 ]msf
55.1128 463.116 mo
(-10)
[3.99591 6.672 0 ]xsh
66.3628 441.816 mo
(0)sh
59.6128 420.516 mo
(10)
[6.672 0 ]xsh
MPSWGS+Helvetica-Bold*1 [-5.2e-7 -12 -12 5.2e-7 0 0 ]msf
49.1128 461.241 mo
(Amplitude)
[-8.66382 -10.6679 -7.33191 -3.336 -3.336 -3.99591 -7.33191 -7.33191 0 ]ysh
1 lw
0 lc
77.5128 438.76 mo
79.2868 438.453 li
81.0608 437.435 li
82.8349 436 li
84.6089 435.335 li
86.383 436.19 li
88.157 437.696 li
89.931 438.419 li
91.7051 438.401 li
93.4791 438.688 li
95.2532 439.149 li
97.0272 438.477 li
98.8012 436.86 li
100.575 435.766 li
102.349 434.887 li
104.123 433.423 li
105.897 433.033 li
107.671 434.843 li
109.445 437.436 li
111.219 438.728 li
112.994 438.094 li
114.768 436.728 li
116.542 436.382 li
118.316 437.492 li
120.09 439.214 li
121.864 440.533 li
123.638 440.556 li
125.412 438.915 li
127.186 436.368 li
128.96 434.104 li
130.734 433.194 li
132.508 433.672 li
134.282 434.939 li
136.056 436.267 li
137.83 437.177 li
139.604 437.408 li
141.378 437.229 li
143.152 437.18 li
144.926 437.361 li
146.7 437.367 li
148.474 436.951 li
150.248 436.369 li
152.022 436.037 li
153.796 436.061 li
155.57 436.271 li
157.344 436.329 li
159.119 436.477 li
160.893 437.507 li
162.667 439.305 li
164.441 440.665 li
166.215 440.948 li
167.989 440.423 li
169.763 439.596 li
171.537 438.775 li
173.311 438.089 li
175.085 437.433 li
176.859 436.607 li
178.633 435.539 li
180.407 434.575 li
182.181 434.104 li
183.955 434.09 li
185.729 434.258 li
187.503 434.245 li
189.277 433.753 li
191.051 433.084 li
192.825 433.059 li
194.599 434.207 li
196.373 435.786 li
198.147 436.839 li
199.921 437.213 li
201.695 437.37 li
203.47 437.446 li
205.244 437.158 li
207.018 436.572 li
208.792 436.196 li
210.566 436.521 li
212.34 437.45 li
214.114 438.352 li
215.888 438.77 li
217.662 438.54 li
219.436 437.818 li
221.21 436.979 li
222.984 436.321 li
224.758 435.854 li
226.532 435.564 li
228.306 435.403 li
230.08 435.234 li
231.854 434.971 li
233.628 434.622 li
235.402 434.114 li
237.176 433.523 li
238.95 432.998 li
240.724 432.805 li
242.498 433.057 li
244.272 433.692 li
246.046 434.57 li
247.82 435.96 li
249.595 438.109 li
251.369 440.499 li
253.143 442.244 li
254.917 442.534 li
256.691 441.442 li
258.465 439.52 li
260.239 437.544 li
262.013 436.068 li
263.787 435.154 li
265.561 434.655 li
267.335 434.433 li
269.109 434.464 li
270.883 434.819 li
272.657 435.298 li
274.431 435.628 li
276.205 435.689 li
277.979 435.644 li
279.753 435.723 li
281.527 435.886 li
283.301 435.907 li
285.075 435.804 li
286.849 435.801 li
288.623 435.893 li
290.397 435.989 li
292.171 436.146 li
293.945 436.407 li
295.719 436.613 li
297.493 436.591 li
299.268 436.49 li
301.042 436.543 li
302.816 436.693 li
304.59 436.849 li
306.364 437.158 li
308.138 437.539 li
309.912 437.56 li
311.686 437.187 li
313.46 436.739 li
315.234 436.388 li
317.008 436.266 li
318.782 436.365 li
320.556 436.438 li
322.33 436.415 li
324.104 436.403 li
325.878 436.486 li
327.652 436.612 li
329.426 436.801 li
331.2 437.033 li
332.974 437.25 li
334.748 437.354 li
336.522 437.314 li
338.296 437.093 li
340.07 436.752 li
341.844 436.501 li
343.618 436.452 li
345.393 436.471 li
347.167 436.441 li
348.941 436.371 li
350.715 436.398 li
352.489 436.602 li
354.263 436.801 li
356.037 436.937 li
357.811 437.26 li
359.585 437.85 li
361.359 438.447 li
363.133 438.877 li
364.907 439.188 li
366.681 439.333 li
368.455 439.057 li
370.229 438.127 li
372.003 436.519 li
373.777 434.385 li
375.551 432.006 li
377.325 429.797 li
379.099 428.471 li
380.873 428.933 li
382.647 431.282 li
384.421 434.569 li
386.195 438.425 li
387.969 442.654 li
389.743 446.379 li
391.518 448.45 li
393.292 448.061 li
395.066 445.623 li
396.84 442.449 li
398.614 439.2 li
400.388 436.351 li
402.162 434.397 li
403.936 433.566 li
405.71 433.689 li
407.484 434.322 li
409.258 435.124 li
411.032 435.882 li
412.806 436.431 li
414.58 436.461 li
416.354 435.73 li
418.128 434.779 li
419.902 434.646 li
421.676 435.219 li
423.45 435.87 li
425.224 436.594 li
426.998 437.362 li
428.772 437.996 li
430.546 438.231 li
432.32 437.993 li
434.094 437.264 li
435.868 436.18 li
437.643 435.115 li
439.417 434.209 li
441.191 433.556 li
442.965 433.279 li
444.739 433.33 li
446.513 433.532 li
448.287 434.153 li
450.061 435.404 li
451.835 437.397 li
453.609 439.628 li
455.383 441.212 li
457.157 441.804 li
458.931 441.96 li
460.705 442.091 li
462.479 442.211 li
464.253 442.532 li
466.027 442.947 li
467.801 442.736 li
469.575 441.639 li
471.349 439.191 li
473.123 436.15 li
474.897 433.621 li
476.671 431.95 li
478.445 431.325 li
480.219 431.609 li
481.993 432.446 li
483.768 432.811 li
485.542 433.243 li
487.316 434.188 li
489.09 435.853 li
490.864 437.672 li
492.638 438.996 li
494.412 439.64 li
496.186 440.048 li
497.96 440.335 li
499.734 440.583 li
501.508 440.527 li
503.282 440.103 li
505.056 439.298 li
506.83 438.779 li
508.604 438.177 li
510.378 437.365 li
512.152 436.692 li
513.926 435.939 li
515.7 434.813 li
517.474 433.614 li
519.248 433.196 li
521.022 434.076 li
522.796 435.663 li
524.57 437.272 li
526.344 438.524 li
528.118 439.207 li
529.893 439.27 li
531.667 438.823 li
533.441 438.137 li
535.215 437.451 li
536.989 436.909 li
538.763 436.662 li
1 /0 /CSD get_res sepcs
1 sep
@
2 lj
1 ml
[6 2.25 1.5 2.25 ] 0 dsh
77.5128 437.827 mo
79.2868 437.668 li
81.0608 436.926 li
82.8349 436.104 li
84.6089 435.654 li
86.383 435.855 li
88.157 436.525 li
89.931 437.157 li
91.7051 437.55 li
93.4791 437.893 li
95.2532 438.113 li
97.0272 437.735 li
98.8012 436.638 li
100.575 435.306 li
102.349 434.105 li
104.123 433.092 li
105.897 432.857 li
107.671 434.351 li
109.445 437.101 li
111.219 438.789 li
112.994 437.889 li
114.768 435.908 li
116.542 435.593 li
118.316 437.478 li
120.09 439.568 li
121.864 440.164 li
123.638 439.495 li
125.412 438.451 li
127.186 437.089 li
128.96 435.137 li
130.734 433.201 li
132.508 432.565 li
134.282 433.816 li
136.056 436.068 li
137.83 437.716 li
139.604 437.968 li
141.378 437.479 li
143.152 437.293 li
144.926 437.42 li
146.7 437.05 li
148.474 436.001 li
150.248 435.088 li
152.022 434.924 li
153.796 435.273 li
155.57 435.751 li
157.344 436.377 li
159.119 437.229 li
160.893 438.199 li
162.667 439.161 li
164.441 439.877 li
166.215 439.97 li
167.989 439.454 li
169.763 438.893 li
171.537 438.563 li
173.311 438.017 li
175.085 436.984 li
176.859 436.019 li
178.633 435.691 li
180.407 435.741 li
182.181 435.591 li
183.955 435.15 li
185.729 434.661 li
187.503 434.215 li
189.277 433.85 li
191.051 433.781 li
192.825 434.21 li
194.599 435.063 li
196.373 436.061 li
198.147 436.927 li
199.921 437.482 li
201.695 437.656 li
203.47 437.474 li
205.244 437.072 li
207.018 436.707 li
208.792 436.645 li
210.566 436.957 li
212.34 437.451 li
214.114 437.878 li
215.888 438.118 li
217.662 438.129 li
219.436 437.841 li
221.21 437.247 li
222.984 436.548 li
224.758 436.044 li
226.532 435.86 li
228.306 435.859 li
230.08 435.84 li
231.854 435.71 li
233.628 435.42 li
235.402 434.897 li
237.176 434.16 li
238.95 433.406 li
240.724 432.892 li
242.498 432.788 li
244.272 433.223 li
246.046 434.32 li
247.82 436.057 li
249.595 438.135 li
251.369 440.075 li
253.143 441.432 li
254.917 441.908 li
256.691 441.41 li
258.465 440.115 li
260.239 438.434 li
262.013 436.833 li
263.787 435.649 li
265.561 435.025 li
267.335 434.92 li
269.109 435.151 li
270.883 435.483 li
272.657 435.728 li
274.431 435.827 li
276.205 435.823 li
277.979 435.8 li
279.753 435.813 li
281.527 435.876 li
283.301 435.958 li
285.075 436.014 li
286.849 436.055 li
288.623 436.143 li
290.397 436.317 li
292.171 436.557 li
293.945 436.803 li
295.719 436.954 li
297.493 436.929 li
299.268 436.824 li
301.042 436.828 li
302.816 436.914 li
304.59 436.898 li
306.364 436.884 li
308.138 437.186 li
309.912 437.7 li
311.686 437.887 li
313.46 437.521 li
315.234 436.945 li
317.008 436.504 li
318.782 436.226 li
320.556 436.135 li
322.33 436.342 li
324.104 436.77 li
325.878 437.138 li
327.652 437.283 li
329.426 437.236 li
331.2 437.06 li
332.974 436.825 li
334.748 436.642 li
336.522 436.566 li
338.296 436.558 li
340.07 436.589 li
341.844 436.669 li
343.618 436.736 li
345.393 436.738 li
347.167 436.779 li
348.941 436.959 li
350.715 437.168 li
352.489 437.29 li
354.263 437.454 li
356.037 437.762 li
357.811 438.022 li
359.585 438.094 li
361.359 438.205 li
363.133 438.59 li
364.907 439.059 li
366.681 439.222 li
368.455 438.884 li
370.229 437.992 li
372.003 436.43 li
373.777 434.176 li
375.551 431.588 li
377.325 429.399 li
379.099 428.371 li
380.873 428.946 li
382.647 431.169 li
384.421 434.747 li
386.195 439.059 li
387.969 443.197 li
389.743 446.245 li
391.518 447.613 li
393.292 447.165 li
395.066 445.17 li
396.84 442.201 li
398.614 438.985 li
400.388 436.224 li
402.162 434.408 li
403.936 433.635 li
405.71 433.654 li
407.484 434.194 li
409.258 435.086 li
411.032 435.985 li
412.806 436.365 li
414.58 436.046 li
416.354 435.397 li
418.128 434.864 li
419.902 434.662 li
421.676 434.927 li
423.45 435.692 li
425.224 436.673 li
426.998 437.51 li
428.772 438.131 li
430.546 438.535 li
432.32 438.446 li
434.094 437.593 li
435.868 436.184 li
437.643 434.832 li
439.417 434.06 li
441.191 433.927 li
442.965 434.136 li
444.739 434.506 li
446.513 435.149 li
448.287 436.071 li
450.061 437.012 li
451.835 437.955 li
453.609 439.224 li
455.383 440.688 li
457.157 441.57 li
458.931 441.529 li
460.705 441.242 li
462.479 441.392 li
464.253 441.686 li
466.027 441.438 li
467.801 440.613 li
469.575 439.682 li
471.349 438.684 li
473.123 437.113 li
474.897 434.893 li
476.671 432.93 li
478.445 432.199 li
480.219 432.535 li
481.993 432.936 li
483.768 433.031 li
485.542 433.492 li
487.316 434.8 li
489.09 436.442 li
490.864 437.738 li
492.638 438.671 li
494.412 439.402 li
496.186 439.802 li
497.96 439.961 li
499.734 440.283 li
501.508 440.64 li
503.282 440.401 li
505.056 439.59 li
506.83 438.945 li
508.604 438.646 li
510.378 438.147 li
512.152 437.294 li
513.926 436.435 li
515.7 435.541 li
517.474 434.444 li
519.248 433.811 li
521.022 434.6 li
522.796 436.521 li
524.57 438.186 li
526.344 438.866 li
528.118 439.022 li
529.893 438.998 li
531.667 438.353 li
533.441 436.996 li
535.215 435.938 li
536.989 436.116 li
538.763 437.128 li
@
1 lj
10 ml
[] 0 dsh
77.5128 438.76 mo
79.2868 438.453 li
81.0608 437.435 li
82.8349 436 li
84.6089 435.335 li
86.383 436.19 li
88.157 437.696 li
89.931 438.419 li
91.7051 438.401 li
93.4791 438.688 li
95.2532 439.149 li
97.0272 438.477 li
98.8012 436.86 li
100.575 435.766 li
102.349 434.887 li
104.123 433.423 li
105.897 433.033 li
107.671 434.843 li
109.445 437.436 li
111.219 438.728 li
112.994 438.094 li
114.768 436.728 li
116.542 436.382 li
118.316 437.492 li
120.09 439.214 li
121.864 440.533 li
123.638 440.556 li
125.412 438.915 li
127.186 436.368 li
128.96 434.104 li
130.734 433.194 li
132.508 433.672 li
134.282 434.939 li
136.056 436.267 li
137.83 437.177 li
139.604 437.408 li
141.378 437.229 li
143.152 437.18 li
144.926 437.361 li
146.7 437.367 li
148.474 436.951 li
150.248 436.369 li
152.022 436.037 li
153.796 436.061 li
155.57 436.271 li
157.344 436.329 li
159.119 436.477 li
160.893 437.507 li
162.667 439.305 li
164.441 440.665 li
166.215 440.948 li
167.989 440.423 li
169.763 439.596 li
171.537 438.775 li
173.311 438.089 li
175.085 437.433 li
176.859 436.607 li
178.633 435.539 li
180.407 434.575 li
182.181 434.104 li
183.955 434.09 li
185.729 434.258 li
187.503 434.245 li
189.277 433.753 li
191.051 433.084 li
192.825 433.059 li
194.599 434.207 li
196.373 435.786 li
198.147 436.839 li
199.921 437.213 li
201.695 437.37 li
203.47 437.446 li
205.244 437.158 li
207.018 436.572 li
208.792 436.196 li
210.566 436.521 li
212.34 437.45 li
214.114 438.352 li
215.888 438.77 li
217.662 438.54 li
219.436 437.818 li
221.21 436.979 li
222.984 436.321 li
224.758 435.854 li
226.532 435.564 li
228.306 435.403 li
230.08 435.234 li
231.854 434.971 li
233.628 434.622 li
235.402 434.114 li
237.176 433.523 li
238.95 432.998 li
240.724 432.805 li
242.498 433.057 li
244.272 433.692 li
246.046 434.57 li
247.82 435.96 li
249.595 438.109 li
251.369 440.499 li
253.143 442.244 li
254.917 442.534 li
256.691 441.442 li
258.465 439.52 li
260.239 437.544 li
262.013 436.068 li
263.787 435.154 li
265.561 434.655 li
267.335 434.433 li
269.109 434.464 li
270.883 434.819 li
272.657 435.298 li
274.431 435.628 li
276.205 435.689 li
277.979 435.644 li
279.753 435.723 li
281.527 435.886 li
283.301 435.907 li
285.075 435.804 li
286.849 435.801 li
288.623 435.893 li
290.397 435.989 li
292.171 436.146 li
293.945 436.407 li
295.719 436.613 li
297.493 436.591 li
299.268 436.49 li
301.042 436.543 li
302.816 436.693 li
304.59 436.849 li
306.364 437.158 li
308.138 437.539 li
309.912 437.56 li
311.686 437.187 li
313.46 436.739 li
315.234 436.388 li
317.008 436.266 li
318.782 436.365 li
320.556 436.438 li
322.33 436.415 li
324.104 436.403 li
325.878 436.486 li
327.652 436.612 li
329.426 436.801 li
331.2 437.033 li
332.974 437.25 li
334.748 437.354 li
336.522 437.314 li
338.296 437.093 li
340.07 436.752 li
341.844 436.501 li
343.618 436.452 li
345.393 436.471 li
347.167 436.441 li
348.941 436.371 li
350.715 436.398 li
352.489 436.602 li
354.263 436.801 li
356.037 436.937 li
357.811 437.26 li
359.585 437.85 li
361.359 438.447 li
363.133 438.877 li
364.907 439.188 li
366.681 439.333 li
368.455 439.057 li
370.229 438.127 li
372.003 436.519 li
373.777 434.385 li
375.551 432.006 li
377.325 429.797 li
379.099 428.471 li
380.873 428.933 li
382.647 431.282 li
384.421 434.569 li
386.195 438.425 li
387.969 442.654 li
389.743 446.379 li
391.518 448.45 li
393.292 448.061 li
395.066 445.623 li
396.84 442.449 li
398.614 439.2 li
400.388 436.351 li
402.162 434.397 li
403.936 433.566 li
405.71 433.689 li
407.484 434.322 li
409.258 435.124 li
411.032 435.882 li
412.806 436.431 li
414.58 436.461 li
416.354 435.73 li
418.128 434.779 li
419.902 434.646 li
421.676 435.219 li
423.45 435.87 li
425.224 436.594 li
426.998 437.362 li
428.772 437.996 li
430.546 438.231 li
432.32 437.993 li
434.094 437.264 li
435.868 436.18 li
437.643 435.115 li
439.417 434.209 li
441.191 433.556 li
442.965 433.279 li
444.739 433.33 li
446.513 433.532 li
448.287 434.153 li
450.061 435.404 li
451.835 437.397 li
453.609 439.628 li
455.383 441.212 li
457.157 441.804 li
458.931 441.96 li
460.705 442.091 li
462.479 442.211 li
464.253 442.532 li
466.027 442.947 li
467.801 442.736 li
469.575 441.639 li
471.349 439.191 li
473.123 436.15 li
474.897 433.621 li
476.671 431.95 li
478.445 431.325 li
480.219 431.609 li
481.993 432.446 li
483.768 432.811 li
485.542 433.243 li
487.316 434.188 li
489.09 435.853 li
490.864 437.672 li
492.638 438.996 li
494.412 439.64 li
496.186 440.048 li
497.96 440.335 li
499.734 440.583 li
501.508 440.527 li
503.282 440.103 li
505.056 439.298 li
506.83 438.779 li
508.604 438.177 li
510.378 437.365 li
512.152 436.692 li
513.926 435.939 li
515.7 434.813 li
517.474 433.614 li
519.248 433.196 li
521.022 434.076 li
522.796 435.663 li
524.57 437.272 li
526.344 438.524 li
528.118 439.207 li
529.893 439.27 li
531.667 438.823 li
533.441 438.137 li
535.215 437.451 li
536.989 436.909 li
538.763 436.662 li
@
2 lj
1 ml
[6 2.25 1.5 2.25 ] 0 dsh
77.5128 437.827 mo
79.2868 437.668 li
81.0608 436.926 li
82.8349 436.104 li
84.6089 435.654 li
86.383 435.855 li
88.157 436.525 li
89.931 437.157 li
91.7051 437.55 li
93.4791 437.893 li
95.2532 438.113 li
97.0272 437.735 li
98.8012 436.638 li
100.575 435.306 li
102.349 434.105 li
104.123 433.092 li
105.897 432.857 li
107.671 434.351 li
109.445 437.101 li
111.219 438.789 li
112.994 437.889 li
114.768 435.908 li
116.542 435.593 li
118.316 437.478 li
120.09 439.568 li
121.864 440.164 li
123.638 439.495 li
125.412 438.451 li
127.186 437.089 li
128.96 435.137 li
130.734 433.201 li
132.508 432.565 li
134.282 433.816 li
136.056 436.068 li
137.83 437.716 li
139.604 437.968 li
141.378 437.479 li
143.152 437.293 li
144.926 437.42 li
146.7 437.05 li
148.474 436.001 li
150.248 435.088 li
152.022 434.924 li
153.796 435.273 li
155.57 435.751 li
157.344 436.377 li
159.119 437.229 li
160.893 438.199 li
162.667 439.161 li
164.441 439.877 li
166.215 439.97 li
167.989 439.454 li
169.763 438.893 li
171.537 438.563 li
173.311 438.017 li
175.085 436.984 li
176.859 436.019 li
178.633 435.691 li
180.407 435.741 li
182.181 435.591 li
183.955 435.15 li
185.729 434.661 li
187.503 434.215 li
189.277 433.85 li
191.051 433.781 li
192.825 434.21 li
194.599 435.063 li
196.373 436.061 li
198.147 436.927 li
199.921 437.482 li
201.695 437.656 li
203.47 437.474 li
205.244 437.072 li
207.018 436.707 li
208.792 436.645 li
210.566 436.957 li
212.34 437.451 li
214.114 437.878 li
215.888 438.118 li
217.662 438.129 li
219.436 437.841 li
221.21 437.247 li
222.984 436.548 li
224.758 436.044 li
226.532 435.86 li
228.306 435.859 li
230.08 435.84 li
231.854 435.71 li
233.628 435.42 li
235.402 434.897 li
237.176 434.16 li
238.95 433.406 li
240.724 432.892 li
242.498 432.788 li
244.272 433.223 li
246.046 434.32 li
247.82 436.057 li
249.595 438.135 li
251.369 440.075 li
253.143 441.432 li
254.917 441.908 li
256.691 441.41 li
258.465 440.115 li
260.239 438.434 li
262.013 436.833 li
263.787 435.649 li
265.561 435.025 li
267.335 434.92 li
269.109 435.151 li
270.883 435.483 li
272.657 435.728 li
274.431 435.827 li
276.205 435.823 li
277.979 435.8 li
279.753 435.813 li
281.527 435.876 li
283.301 435.958 li
285.075 436.014 li
286.849 436.055 li
288.623 436.143 li
290.397 436.317 li
292.171 436.557 li
293.945 436.803 li
295.719 436.954 li
297.493 436.929 li
299.268 436.824 li
301.042 436.828 li
302.816 436.914 li
304.59 436.898 li
306.364 436.884 li
308.138 437.186 li
309.912 437.7 li
311.686 437.887 li
313.46 437.521 li
315.234 436.945 li
317.008 436.504 li
318.782 436.226 li
320.556 436.135 li
322.33 436.342 li
324.104 436.77 li
325.878 437.138 li
327.652 437.283 li
329.426 437.236 li
331.2 437.06 li
332.974 436.825 li
334.748 436.642 li
336.522 436.566 li
338.296 436.558 li
340.07 436.589 li
341.844 436.669 li
343.618 436.736 li
345.393 436.738 li
347.167 436.779 li
348.941 436.959 li
350.715 437.168 li
352.489 437.29 li
354.263 437.454 li
356.037 437.762 li
357.811 438.022 li
359.585 438.094 li
361.359 438.205 li
363.133 438.59 li
364.907 439.059 li
366.681 439.222 li
368.455 438.884 li
370.229 437.992 li
372.003 436.43 li
373.777 434.176 li
375.551 431.588 li
377.325 429.399 li
379.099 428.371 li
380.873 428.946 li
382.647 431.169 li
384.421 434.747 li
386.195 439.059 li
387.969 443.197 li
389.743 446.245 li
391.518 447.613 li
393.292 447.165 li
395.066 445.17 li
396.84 442.201 li
398.614 438.985 li
400.388 436.224 li
402.162 434.408 li
403.936 433.635 li
405.71 433.654 li
407.484 434.194 li
409.258 435.086 li
411.032 435.985 li
412.806 436.365 li
414.58 436.046 li
416.354 435.397 li
418.128 434.864 li
419.902 434.662 li
421.676 434.927 li
423.45 435.692 li
425.224 436.673 li
426.998 437.51 li
428.772 438.131 li
430.546 438.535 li
432.32 438.446 li
434.094 437.593 li
435.868 436.184 li
437.643 434.832 li
439.417 434.06 li
441.191 433.927 li
442.965 434.136 li
444.739 434.506 li
446.513 435.149 li
448.287 436.071 li
450.061 437.012 li
451.835 437.955 li
453.609 439.224 li
455.383 440.688 li
457.157 441.57 li
458.931 441.529 li
460.705 441.242 li
462.479 441.392 li
464.253 441.686 li
466.027 441.438 li
467.801 440.613 li
469.575 439.682 li
471.349 438.684 li
473.123 437.113 li
474.897 434.893 li
476.671 432.93 li
478.445 432.199 li
480.219 432.535 li
481.993 432.936 li
483.768 433.031 li
485.542 433.492 li
487.316 434.8 li
489.09 436.442 li
490.864 437.738 li
492.638 438.671 li
494.412 439.402 li
496.186 439.802 li
497.96 439.961 li
499.734 440.283 li
501.508 440.64 li
503.282 440.401 li
505.056 439.59 li
506.83 438.945 li
508.604 438.646 li
510.378 438.147 li
512.152 437.294 li
513.926 436.435 li
515.7 435.541 li
517.474 434.444 li
519.248 433.811 li
521.022 434.6 li
522.796 436.521 li
524.57 438.186 li
526.344 438.866 li
528.118 439.022 li
529.893 438.998 li
531.667 438.353 li
533.441 436.996 li
535.215 435.938 li
536.989 436.116 li
538.763 437.128 li
@
119.513 431.241 mo
119.513 405.741 li
266.513 405.741 li
266.513 431.241 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
1 /0 /CSD get_res sepcs
1 sep
MPSWGR+Helvetica*1 [8.00025 0 0 -8.00025 0 0 ]msf
154.763 416.138 mo
(clean dataset)
[4.00012 1.77592 4.44814 4.44815 4.44814 2.22406 4.44814 4.44814 2.22408 4.44814 4.00012 4.44814 
0 ]xsh
1 lj
10 ml
[] 0 dsh
122.513 412.763 mo
152.513 412.763 li
@
MPSWGR+Helvetica*1 [8.00025 0 0 -8.00025 0 0 ]msf
154.763 427.594 mo
(proposed denoising approach)
[4.44814 2.66402 4.44814 4.44814 4.44814 4.00014 4.44814 4.44814 2.22406 4.44814 4.44814 4.44815 
4.44814 1.77592 4.00014 1.77592 4.44814 4.44814 2.22408 4.44814 4.44814 4.44814 2.66403 4.44814 
4.44814 4.00012 0 ]xsh
2 lj
1 ml
[6 2.25 1.5 2.25 ] 0 dsh
122.513 424.219 mo
152.513 424.219 li
@
.5 lw
0 lj
10 ml
[] 0 dsh
119.513 431.241 mo
119.513 405.741 li
266.513 405.741 li
266.513 431.241 li
cp
1 /0 /CSD get_res sepcs
.851 sep
@
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
[/CSD [/0 ]]
] del_res
/MPSWGR+Helvetica*1 uf
/MPSWGS+Helvetica-Bold*1 uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: font Helvetica-Bold
%%+ font Helvetica
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
